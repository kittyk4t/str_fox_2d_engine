{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3","program":"/Users/katianawieser/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","bytemuck","--edition=2018","/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","--cfg","feature=\"extern_crate_alloc\"","-C","metadata=d0838b487da65df7","-C","extra-filename=-d0838b487da65df7","--out-dir","/Users/katianawieser/CS181G/str_fox_2d_engine/target/rls/debug/deps","-L","dependency=/Users/katianawieser/CS181G/str_fox_2d_engine/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/katianawieser/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/katianawieser/CS181G/str_fox_2d_engine/target/rls/debug/deps/libbytemuck-d0838b487da65df7.rmeta"},"prelude":{"crate_id":{"name":"bytemuck","disambiguator":[12726531903193979022,0]},"crate_root":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src","external_crates":[{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[2242199718071837415,0]}},{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[2188212999151601010,0]}},{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[1020664553731942337,0]}},{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[5221923779696816614,0]}}],"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":0,"byte_end":14958,"line_start":1,"line_end":471,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":1,"index":0},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":2049,"byte_end":2053,"line_start":54,"line_end":54,"column_start":11,"column_end":15},"alias_span":null,"name":"__core","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":2686,"byte_end":2687,"line_start":79,"line_end":79,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":2722,"byte_end":2723,"line_start":82,"line_end":82,"column_start":19,"column_end":20},"alias_span":null,"name":"*","value":"Zeroable","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":2748,"byte_end":2749,"line_start":85,"line_end":85,"column_start":14,"column_end":15},"alias_span":null,"name":"*","value":"Pod","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":2788,"byte_end":2789,"line_start":88,"line_end":88,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":2826,"byte_end":2827,"line_start":91,"line_end":91,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":2868,"byte_end":2869,"line_start":94,"line_end":94,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":0,"byte_end":14958,"line_start":1,"line_end":471,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":250},{"krate":0,"index":252},{"krate":0,"index":622},{"krate":0,"index":631},{"krate":0,"index":633},{"krate":0,"index":635},{"krate":0,"index":636},{"krate":0,"index":637},{"krate":0,"index":639},{"krate":0,"index":640},{"krate":0,"index":642},{"krate":0,"index":254},{"krate":0,"index":256},{"krate":0,"index":259},{"krate":0,"index":262},{"krate":0,"index":265},{"krate":0,"index":268},{"krate":0,"index":271},{"krate":0,"index":274},{"krate":0,"index":277},{"krate":0,"index":280},{"krate":0,"index":283},{"krate":0,"index":286},{"krate":0,"index":289}],"decl_id":null,"docs":" This crate gives small utilities for casting between plain data types.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":0,"byte_end":10,"line_start":1,"line_end":1,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":11,"byte_end":33,"line_start":2,"line_end":2,"column_start":1,"column_end":23}},{"value":"/ This crate gives small utilities for casting between plain data types.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":107,"byte_end":181,"line_start":5,"line_end":5,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":182,"byte_end":185,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ## Basics","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":186,"byte_end":199,"line_start":7,"line_end":7,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":200,"byte_end":203,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Data comes in five basic forms in Rust, so we have five basic casting","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":204,"byte_end":277,"line_start":9,"line_end":9,"column_start":1,"column_end":74}},{"value":"/ functions:","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":278,"byte_end":292,"line_start":10,"line_end":10,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":293,"byte_end":296,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ * `T` uses [`cast`]","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":297,"byte_end":320,"line_start":12,"line_end":12,"column_start":1,"column_end":24}},{"value":"/ * `&T` uses [`cast_ref`]","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":321,"byte_end":349,"line_start":13,"line_end":13,"column_start":1,"column_end":29}},{"value":"/ * `&mut T` uses [`cast_mut`]","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":350,"byte_end":382,"line_start":14,"line_end":14,"column_start":1,"column_end":33}},{"value":"/ * `&[T]` uses [`cast_slice`]","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":383,"byte_end":415,"line_start":15,"line_end":15,"column_start":1,"column_end":33}},{"value":"/ * `&mut [T]` uses [`cast_slice_mut`]","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":416,"byte_end":456,"line_start":16,"line_end":16,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":457,"byte_end":460,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Some casts will never fail (eg: `cast::<u32, f32>` always works), other","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":461,"byte_end":536,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/ casts might fail (eg: `cast_ref::<[u8; 4], u32>` will fail if the reference","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":537,"byte_end":616,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ isn't already aligned to 4). Each casting function has a \"try\" version which","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":617,"byte_end":697,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/ will return a `Result`, and the \"normal\" version which will simply panic on","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":698,"byte_end":777,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/ invalid input.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":778,"byte_end":796,"line_start":22,"line_end":22,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":797,"byte_end":800,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ## Using Your Own Types","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":801,"byte_end":828,"line_start":24,"line_end":24,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":829,"byte_end":832,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ All the functions here are guarded by the [`Pod`] trait, which is a","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":833,"byte_end":904,"line_start":26,"line_end":26,"column_start":1,"column_end":72}},{"value":"/ sub-trait of the [`Zeroable`] trait.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":905,"byte_end":945,"line_start":27,"line_end":27,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":946,"byte_end":949,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ If you're very sure that your type is eligible, you can implement those","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":950,"byte_end":1025,"line_start":29,"line_end":29,"column_start":1,"column_end":76}},{"value":"/ traits for your type and then they'll have full casting support. However,","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":1026,"byte_end":1103,"line_start":30,"line_end":30,"column_start":1,"column_end":78}},{"value":"/ these traits are `unsafe`, and you should carefully read the requirements","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":1104,"byte_end":1181,"line_start":31,"line_end":31,"column_start":1,"column_end":78}},{"value":"/ before adding the them to your own types.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":1182,"byte_end":1227,"line_start":32,"line_end":32,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":1228,"byte_end":1231,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ ## Features","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":1232,"byte_end":1247,"line_start":34,"line_end":34,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":1248,"byte_end":1251,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ * This crate is core only by default, but if you're using Rust 1.36 or later","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":1252,"byte_end":1332,"line_start":36,"line_end":36,"column_start":1,"column_end":81}},{"value":"/   you can enable the `extern_crate_alloc` cargo feature for some additional","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":1333,"byte_end":1412,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/   methods related to `Box` and `Vec`. Note that the `docs.rs` documentation","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":1413,"byte_end":1492,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/   is always built with `extern_crate_alloc` cargo feature enabled.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":1493,"byte_end":1563,"line_start":39,"line_end":39,"column_start":1,"column_end":71}}]},{"kind":"Mod","id":{"krate":0,"index":18},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"allocation","qualname":"::allocation","value":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","parent":null,"children":[{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":44},{"krate":0,"index":47},{"krate":0,"index":51},{"krate":0,"index":53},{"krate":0,"index":57},{"krate":0,"index":59},{"krate":0,"index":63},{"krate":0,"index":66}],"decl_id":null,"docs":" Stuff to boost things in the `alloc` crate.","sig":null,"attributes":[{"value":"cfg(feature = \"extern_crate_alloc\")","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":2568,"byte_end":2606,"line_start":76,"line_end":76,"column_start":1,"column_end":39}},{"value":"cfg(feature = \"extern_crate_alloc\")","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":15431,"byte_end":15470,"line_start":1,"line_end":1,"column_start":1,"column_end":40}},{"value":"/ Stuff to boost things in the `alloc` crate.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":15472,"byte_end":15519,"line_start":3,"line_end":3,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":15520,"byte_end":15523,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ * You must enable the `extern_crate_alloc` feature of `bytemuck` or you will","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":15524,"byte_end":15604,"line_start":5,"line_end":5,"column_start":1,"column_end":81}},{"value":"/   not be able to use this module! This is generally done by adding the","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":15605,"byte_end":15679,"line_start":6,"line_end":6,"column_start":1,"column_end":75}},{"value":"/   feature to the dependency in Cargo.toml like so: ","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":15680,"byte_end":15735,"line_start":7,"line_end":7,"column_start":1,"column_end":56}},{"value":"/   `bytemuck = { version = \"VERSION_YOU_ARE_USING\", features = [\"extern_crate_alloc\"]}`","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":15736,"byte_end":15826,"line_start":8,"line_end":8,"column_start":1,"column_end":91}}]},{"kind":"Function","id":{"krate":0,"index":40},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":16031,"byte_end":16039,"line_start":22,"line_end":22,"column_start":8,"column_end":16},"name":"cast_box","qualname":"::allocation::cast_box","value":"pub fn cast_box<A: Pod, B: Pod>(Box<A>) -> Box<B>","parent":null,"children":[],"decl_id":null,"docs":" As [`try_cast_box`](try_cast_box), but unwraps for you.\n","sig":null,"attributes":[{"value":"/ As [`try_cast_box`](try_cast_box), but unwraps for you.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":15954,"byte_end":16013,"line_start":20,"line_end":20,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":16014,"byte_end":16023,"line_start":21,"line_end":21,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":44},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":16486,"byte_end":16498,"line_start":36,"line_end":36,"column_start":8,"column_end":20},"name":"try_cast_box","qualname":"::allocation::try_cast_box","value":"pub fn try_cast_box<A: Pod, B: Pod>(Box<A>)\n-> Result<Box<B>, (PodCastError, Box<A>)>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to cast the content type of a [`Box`](alloc::boxed::Box).","sig":null,"attributes":[{"value":"/ Attempts to cast the content type of a [`Box`](alloc::boxed::Box).","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":16138,"byte_end":16208,"line_start":26,"line_end":26,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":16209,"byte_end":16212,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ On failure you get back an error along with the starting `Box`.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":16213,"byte_end":16280,"line_start":28,"line_end":28,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":16281,"byte_end":16284,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":16285,"byte_end":16299,"line_start":30,"line_end":30,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":16300,"byte_end":16303,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ * The start and end content type of the `Box` must have the exact same","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":16304,"byte_end":16378,"line_start":32,"line_end":32,"column_start":1,"column_end":75}},{"value":"/   alignment.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":16379,"byte_end":16395,"line_start":33,"line_end":33,"column_start":1,"column_end":17}},{"value":"/ * The start and end size of the `Box` must have the exact same size.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":16396,"byte_end":16468,"line_start":34,"line_end":34,"column_start":1,"column_end":73}},{"value":"inline","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":16469,"byte_end":16478,"line_start":35,"line_end":35,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":47},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":17364,"byte_end":17378,"line_start":61,"line_end":61,"column_start":8,"column_end":22},"name":"try_zeroed_box","qualname":"::allocation::try_zeroed_box","value":"pub fn try_zeroed_box<T: Zeroable>() -> Result<Box<T>, ()>","parent":null,"children":[],"decl_id":null,"docs":" Allocates a `Box<T>` with all of the contents being zeroed out.","sig":null,"attributes":[{"value":"/ Allocates a `Box<T>` with all of the contents being zeroed out.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":16944,"byte_end":17011,"line_start":50,"line_end":50,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":17012,"byte_end":17015,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ This uses the global allocator to create a zeroed allocation and _then_","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":17016,"byte_end":17091,"line_start":52,"line_end":52,"column_start":1,"column_end":76}},{"value":"/ turns it into a Box. In other words, it's 100% assured that the zeroed data","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":17092,"byte_end":17171,"line_start":53,"line_end":53,"column_start":1,"column_end":80}},{"value":"/ won't be put temporarily on the stack. You can make a box of any size","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":17172,"byte_end":17245,"line_start":54,"line_end":54,"column_start":1,"column_end":74}},{"value":"/ without fear of a stack overflow.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":17246,"byte_end":17283,"line_start":55,"line_end":55,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":17284,"byte_end":17287,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":17288,"byte_end":17302,"line_start":57,"line_end":57,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":17303,"byte_end":17306,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ This fails if the allocation fails.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":17307,"byte_end":17346,"line_start":59,"line_end":59,"column_start":1,"column_end":40}},{"value":"inline","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":17347,"byte_end":17356,"line_start":60,"line_end":60,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":51},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":18503,"byte_end":18513,"line_start":91,"line_end":91,"column_start":8,"column_end":18},"name":"zeroed_box","qualname":"::allocation::zeroed_box","value":"pub fn zeroed_box<T: Zeroable>() -> Box<T>","parent":null,"children":[],"decl_id":null,"docs":" As [`try_zeroed_box`], but unwraps for you.\n","sig":null,"attributes":[{"value":"/ As [`try_zeroed_box`], but unwraps for you.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":18438,"byte_end":18485,"line_start":89,"line_end":89,"column_start":1,"column_end":48}},{"value":"inline","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":18486,"byte_end":18495,"line_start":90,"line_end":90,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":53},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":18987,"byte_end":19007,"line_start":106,"line_end":106,"column_start":8,"column_end":28},"name":"try_zeroed_slice_box","qualname":"::allocation::try_zeroed_slice_box","value":"pub fn try_zeroed_slice_box<T: Zeroable>(usize) -> Result<Box<[T]>, ()>","parent":null,"children":[],"decl_id":null,"docs":" Allocates a `Box<[T]>` with all contents being zeroed out.","sig":null,"attributes":[{"value":"/ Allocates a `Box<[T]>` with all contents being zeroed out.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":18572,"byte_end":18634,"line_start":95,"line_end":95,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":18635,"byte_end":18638,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ This uses the global allocator to create a zeroed allocation and _then_","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":18639,"byte_end":18714,"line_start":97,"line_end":97,"column_start":1,"column_end":76}},{"value":"/ turns it into a Box. In other words, it's 100% assured that the zeroed data","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":18715,"byte_end":18794,"line_start":98,"line_end":98,"column_start":1,"column_end":80}},{"value":"/ won't be put temporarily on the stack. You can make a box of any size","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":18795,"byte_end":18868,"line_start":99,"line_end":99,"column_start":1,"column_end":74}},{"value":"/ without fear of a stack overflow.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":18869,"byte_end":18906,"line_start":100,"line_end":100,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":18907,"byte_end":18910,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":18911,"byte_end":18925,"line_start":102,"line_end":102,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":18926,"byte_end":18929,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ This fails if the allocation fails.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":18930,"byte_end":18969,"line_start":104,"line_end":104,"column_start":1,"column_end":40}},{"value":"inline","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":18970,"byte_end":18979,"line_start":105,"line_end":105,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":57},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":20083,"byte_end":20099,"line_start":137,"line_end":137,"column_start":8,"column_end":24},"name":"zeroed_slice_box","qualname":"::allocation::zeroed_slice_box","value":"pub fn zeroed_slice_box<T: Zeroable>(usize) -> Box<[T]>","parent":null,"children":[],"decl_id":null,"docs":" As [`try_zeroed_slice_box`](try_zeroed_slice_box), but unwraps for you.\n","sig":null,"attributes":[{"value":"/ As [`try_zeroed_slice_box`](try_zeroed_slice_box), but unwraps for you.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":20000,"byte_end":20075,"line_start":136,"line_end":136,"column_start":1,"column_end":76}}]},{"kind":"Function","id":{"krate":0,"index":59},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":20262,"byte_end":20270,"line_start":143,"line_end":143,"column_start":8,"column_end":16},"name":"cast_vec","qualname":"::allocation::cast_vec","value":"pub fn cast_vec<A: Pod, B: Pod>(Vec<A>) -> Vec<B>","parent":null,"children":[],"decl_id":null,"docs":" As [`try_cast_vec`](try_cast_vec), but unwraps for you.\n","sig":null,"attributes":[{"value":"/ As [`try_cast_vec`](try_cast_vec), but unwraps for you.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":20185,"byte_end":20244,"line_start":141,"line_end":141,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":20245,"byte_end":20254,"line_start":142,"line_end":142,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":63},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":20885,"byte_end":20897,"line_start":160,"line_end":160,"column_start":8,"column_end":20},"name":"try_cast_vec","qualname":"::allocation::try_cast_vec","value":"pub fn try_cast_vec<A: Pod, B: Pod>(Vec<A>)\n-> Result<Vec<B>, (PodCastError, Vec<A>)>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to cast the content type of a [`Vec`](alloc::vec::Vec).","sig":null,"attributes":[{"value":"/ Attempts to cast the content type of a [`Vec`](alloc::vec::Vec).","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":20369,"byte_end":20437,"line_start":147,"line_end":147,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":20438,"byte_end":20441,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ On failure you get back an error along with the starting `Vec`.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":20442,"byte_end":20509,"line_start":149,"line_end":149,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":20510,"byte_end":20513,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":20514,"byte_end":20528,"line_start":151,"line_end":151,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":20529,"byte_end":20532,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ * The start and end content type of the `Vec` must have the exact same","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":20533,"byte_end":20607,"line_start":153,"line_end":153,"column_start":1,"column_end":75}},{"value":"/   alignment.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":20608,"byte_end":20624,"line_start":154,"line_end":154,"column_start":1,"column_end":17}},{"value":"/ * The start and end size of the `Vec` must have the exact same size.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":20625,"byte_end":20697,"line_start":155,"line_end":155,"column_start":1,"column_end":73}},{"value":"/ * In the future this second restriction might be lessened by having the","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":20698,"byte_end":20773,"line_start":156,"line_end":156,"column_start":1,"column_end":76}},{"value":"/   capacity and length get adjusted during transmutation, but for now it's","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":20774,"byte_end":20851,"line_start":157,"line_end":157,"column_start":1,"column_end":78}},{"value":"/   absolute.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":20852,"byte_end":20867,"line_start":158,"line_end":158,"column_start":1,"column_end":16}},{"value":"inline","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":20868,"byte_end":20877,"line_start":159,"line_end":159,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":66},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":22761,"byte_end":22779,"line_start":203,"line_end":203,"column_start":8,"column_end":26},"name":"pod_collect_to_vec","qualname":"::allocation::pod_collect_to_vec","value":"pub fn pod_collect_to_vec<A: Pod, B: Pod>(&[A]) -> Vec<B>","parent":null,"children":[],"decl_id":null,"docs":" This \"collects\" a slice of pod data into a vec of a different pod type.","sig":null,"attributes":[{"value":"/ This \"collects\" a slice of pod data into a vec of a different pod type.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":22160,"byte_end":22235,"line_start":187,"line_end":187,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":22236,"byte_end":22239,"line_start":188,"line_end":188,"column_start":1,"column_end":4}},{"value":"/ Unlike with [`cast_slice`] and [`cast_slice_mut`], this will always work.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":22240,"byte_end":22317,"line_start":189,"line_end":189,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":22318,"byte_end":22321,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ The output vec will be of a minimal size/capacity to hold the slice given.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":22322,"byte_end":22400,"line_start":191,"line_end":191,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":22401,"byte_end":22404,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":22405,"byte_end":22416,"line_start":193,"line_end":193,"column_start":1,"column_end":12}},{"value":"/ # use bytemuck::*;","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":22417,"byte_end":22439,"line_start":194,"line_end":194,"column_start":1,"column_end":23}},{"value":"/ let halfwords: [u16; 4] = [5, 6, 7, 8];","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":22440,"byte_end":22483,"line_start":195,"line_end":195,"column_start":1,"column_end":44}},{"value":"/ let vec_of_words: Vec<u32> = pod_collect_to_vec(&halfwords);","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":22484,"byte_end":22548,"line_start":196,"line_end":196,"column_start":1,"column_end":65}},{"value":"/ if cfg!(target_endian = \"little\") {","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":22549,"byte_end":22588,"line_start":197,"line_end":197,"column_start":1,"column_end":40}},{"value":"/   assert_eq!(&vec_of_words[..], &[0x0006_0005, 0x0008_0007][..])","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":22589,"byte_end":22657,"line_start":198,"line_end":198,"column_start":1,"column_end":69}},{"value":"/ } else {","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":22658,"byte_end":22670,"line_start":199,"line_end":199,"column_start":1,"column_end":13}},{"value":"/   assert_eq!(&vec_of_words[..], &[0x0005_0006, 0x0007_0008][..])","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":22671,"byte_end":22739,"line_start":200,"line_end":200,"column_start":1,"column_end":69}},{"value":"/ }","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":22740,"byte_end":22745,"line_start":201,"line_end":201,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/allocation.rs","byte_start":22746,"byte_end":22753,"line_start":202,"line_end":202,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":72},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":23970,"byte_end":23978,"line_start":15,"line_end":15,"column_start":18,"column_end":26},"name":"Zeroable","qualname":"::zeroable::Zeroable","value":"Zeroable: Sized","parent":null,"children":[{"krate":0,"index":73}],"decl_id":null,"docs":" Trait for types that can be safely created with\n [`zeroed`](core::mem::zeroed).","sig":null,"attributes":[{"value":"/ Trait for types that can be safely created with","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":23512,"byte_end":23563,"line_start":3,"line_end":3,"column_start":1,"column_end":52}},{"value":"/ [`zeroed`](core::mem::zeroed).","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":23564,"byte_end":23598,"line_start":4,"line_end":4,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":23599,"byte_end":23602,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ An all-zeroes value may or may not be the same value as the","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":23603,"byte_end":23666,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"/ [Default](core::default::Default) value of the type.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":23667,"byte_end":23723,"line_start":7,"line_end":7,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":23724,"byte_end":23727,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":23728,"byte_end":23741,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":23742,"byte_end":23745,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * Your type must be inhabited (eg: no","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":23746,"byte_end":23787,"line_start":11,"line_end":11,"column_start":1,"column_end":42}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":23788,"byte_end":23835,"line_start":12,"line_end":12,"column_start":1,"column_end":48}},{"value":"/ * Your type must be allowed to be an \"all zeroes\" bit pattern (eg: no","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":23836,"byte_end":23909,"line_start":13,"line_end":13,"column_start":1,"column_end":74}},{"value":"/   [`NonNull<T>`](core::ptr::NonNull)).","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":23910,"byte_end":23952,"line_start":14,"line_end":14,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":24258,"byte_end":24264,"line_start":22,"line_end":22,"column_start":6,"column_end":12},"name":"zeroed","qualname":"::zeroable::Zeroable::zeroed","value":"pub fn zeroed() -> Self","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":" Calls [`zeroed`](core::mem::zeroed).","sig":null,"attributes":[{"value":"/ Calls [`zeroed`](core::mem::zeroed).","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":23990,"byte_end":24030,"line_start":16,"line_end":16,"column_start":3,"column_end":43}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":24033,"byte_end":24036,"line_start":17,"line_end":17,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `MyType::zeroed()` in your","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":24039,"byte_end":24114,"line_start":18,"line_end":18,"column_start":3,"column_end":78}},{"value":"/ code. It is a contract of this trait that if you implement it on your type","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":24117,"byte_end":24195,"line_start":19,"line_end":19,"column_start":3,"column_end":81}},{"value":"/ you **must not** override this method.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":24198,"byte_end":24240,"line_start":20,"line_end":20,"column_start":3,"column_end":45}},{"value":"inline","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":24243,"byte_end":24252,"line_start":21,"line_end":21,"column_start":3,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":169},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":29818,"byte_end":29821,"line_start":29,"line_end":29,"column_start":18,"column_end":21},"name":"Pod","qualname":"::pod::Pod","value":"Pod: Zeroable + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for \"plain old data\".","sig":null,"attributes":[{"value":"/ Marker trait for \"plain old data\".","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":28522,"byte_end":28560,"line_start":3,"line_end":3,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":28561,"byte_end":28564,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The point of this trait is that once something is marked \"plain old data\"","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":28565,"byte_end":28642,"line_start":5,"line_end":5,"column_start":1,"column_end":78}},{"value":"/ you can really go to town with the bit fiddling and bit casting. Therefore,","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":28643,"byte_end":28722,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/ it's a relatively strong claim to make about a type. Do not add this to your","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":28723,"byte_end":28803,"line_start":7,"line_end":7,"column_start":1,"column_end":81}},{"value":"/ type casually.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":28804,"byte_end":28822,"line_start":8,"line_end":8,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":28823,"byte_end":28826,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ **Reminder:** The results of casting around bytes between data types are","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":28827,"byte_end":28903,"line_start":10,"line_end":10,"column_start":1,"column_end":77}},{"value":"/ _endian dependant_. Little-endian machines are the most common, but","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":28904,"byte_end":28975,"line_start":11,"line_end":11,"column_start":1,"column_end":72}},{"value":"/ big-endian machines do exist (and big-endian is also used for \"network","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":28976,"byte_end":29050,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ order\" bytes).","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":29051,"byte_end":29069,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":29070,"byte_end":29073,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":29074,"byte_end":29087,"line_start":15,"line_end":15,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":29088,"byte_end":29091,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ * The type must be inhabited (eg: no","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":29092,"byte_end":29132,"line_start":17,"line_end":17,"column_start":1,"column_end":41}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":29133,"byte_end":29180,"line_start":18,"line_end":18,"column_start":1,"column_end":48}},{"value":"/ * The type must allow any bit pattern (eg: no `bool` or `char`, which have","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":29181,"byte_end":29259,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/   illegal bit patterns).","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":29260,"byte_end":29288,"line_start":20,"line_end":20,"column_start":1,"column_end":29}},{"value":"/ * The type must not contain any padding bytes, either in the middle or on","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":29289,"byte_end":29366,"line_start":21,"line_end":21,"column_start":1,"column_end":78}},{"value":"/   the end (eg: no `#[repr(C)] struct Foo(u8, u16)`, which has padding in the","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":29367,"byte_end":29447,"line_start":22,"line_end":22,"column_start":1,"column_end":81}},{"value":"/   middle, and also no `#[repr(C)] struct Foo(u16, u8)`, which has padding on","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":29448,"byte_end":29528,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/   the end).","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":29529,"byte_end":29544,"line_start":24,"line_end":24,"column_start":1,"column_end":16}},{"value":"/ * The type needs to have all fields also be `Pod`.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":29545,"byte_end":29599,"line_start":25,"line_end":25,"column_start":1,"column_end":55}},{"value":"/ * The type needs to be `repr(C)` or `repr(transparent)`. In the case of","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":29600,"byte_end":29675,"line_start":26,"line_end":26,"column_start":1,"column_end":76}},{"value":"/   `repr(C)`, the `packed` and `align` repr modifiers can be used as long as","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":29676,"byte_end":29755,"line_start":27,"line_end":27,"column_start":1,"column_end":80}},{"value":"/   all other rules end up being followed.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":29756,"byte_end":29800,"line_start":28,"line_end":28,"column_start":1,"column_end":45}}]},{"kind":"Trait","id":{"krate":0,"index":213},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":35828,"byte_end":35838,"line_start":78,"line_end":78,"column_start":18,"column_end":28},"name":"Contiguous","qualname":"::contiguous::Contiguous","value":"Contiguous: Copy + 'static","parent":null,"children":[{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218}],"decl_id":null,"docs":" A trait indicating that:","sig":null,"attributes":[{"value":"/ A trait indicating that:","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":32860,"byte_end":32888,"line_start":3,"line_end":3,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":32889,"byte_end":32892,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ 1. A type has an equivalent representation to some known integral type.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":32893,"byte_end":32968,"line_start":5,"line_end":5,"column_start":1,"column_end":76}},{"value":"/ 2. All instances of this type fall in a fixed range of values.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":32969,"byte_end":33035,"line_start":6,"line_end":6,"column_start":1,"column_end":67}},{"value":"/ 3. Within that range, there are no gaps.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":33036,"byte_end":33080,"line_start":7,"line_end":7,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":33081,"byte_end":33084,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This is generally useful for fieldless enums (aka \"c-style\" enums), however","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":33085,"byte_end":33164,"line_start":9,"line_end":9,"column_start":1,"column_end":80}},{"value":"/ it's important that it only be used for those with an explicit `#[repr]`, as","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":33165,"byte_end":33245,"line_start":10,"line_end":10,"column_start":1,"column_end":81}},{"value":"/ `#[repr(Rust)]` fieldess enums have an unspecified layout.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":33246,"byte_end":33308,"line_start":11,"line_end":11,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":33309,"byte_end":33312,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Additionally, you shouldn't assume that all implementations are enums. Any","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":33313,"byte_end":33391,"line_start":13,"line_end":13,"column_start":1,"column_end":79}},{"value":"/ type which meets the requirements above while following the rules under","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":33392,"byte_end":33467,"line_start":14,"line_end":14,"column_start":1,"column_end":76}},{"value":"/ \"Safety\" below is valid.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":33468,"byte_end":33496,"line_start":15,"line_end":15,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":33497,"byte_end":33500,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":33501,"byte_end":33514,"line_start":17,"line_end":17,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":33515,"byte_end":33518,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":33519,"byte_end":33526,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ # use bytemuck::Contiguous;","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":33527,"byte_end":33558,"line_start":20,"line_end":20,"column_start":1,"column_end":32}},{"value":"/ #[repr(u8)]","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":33559,"byte_end":33574,"line_start":21,"line_end":21,"column_start":1,"column_end":16}},{"value":"/ #[derive(Debug, Copy, Clone, PartialEq)]","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":33575,"byte_end":33619,"line_start":22,"line_end":22,"column_start":1,"column_end":45}},{"value":"/ enum Foo {","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":33620,"byte_end":33634,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/   A = 0,","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":33635,"byte_end":33647,"line_start":24,"line_end":24,"column_start":1,"column_end":13}},{"value":"/   B = 1,","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":33648,"byte_end":33660,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"/   C = 2,","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":33661,"byte_end":33673,"line_start":26,"line_end":26,"column_start":1,"column_end":13}},{"value":"/   D = 3,","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":33674,"byte_end":33686,"line_start":27,"line_end":27,"column_start":1,"column_end":13}},{"value":"/   E = 4,","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":33687,"byte_end":33699,"line_start":28,"line_end":28,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":33700,"byte_end":33705,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"/ unsafe impl Contiguous for Foo {","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":33706,"byte_end":33742,"line_start":30,"line_end":30,"column_start":1,"column_end":37}},{"value":"/   type Int = u8;","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":33743,"byte_end":33763,"line_start":31,"line_end":31,"column_start":1,"column_end":21}},{"value":"/   const MIN_VALUE: u8 = Foo::A as u8;","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":33764,"byte_end":33805,"line_start":32,"line_end":32,"column_start":1,"column_end":42}},{"value":"/   const MAX_VALUE: u8 = Foo::E as u8;","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":33806,"byte_end":33847,"line_start":33,"line_end":33,"column_start":1,"column_end":42}},{"value":"/ }","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":33848,"byte_end":33853,"line_start":34,"line_end":34,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(Foo::from_integer(3).unwrap(), Foo::D);","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":33854,"byte_end":33908,"line_start":35,"line_end":35,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(Foo::from_integer(8), None);","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":33909,"byte_end":33952,"line_start":36,"line_end":36,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(Foo::C.into_integer(), 2);","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":33953,"byte_end":33994,"line_start":37,"line_end":37,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":33995,"byte_end":34002,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":34003,"byte_end":34015,"line_start":39,"line_end":39,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":34016,"byte_end":34019,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ This is an unsafe trait, and incorrectly implementing it is undefined","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":34020,"byte_end":34093,"line_start":41,"line_end":41,"column_start":1,"column_end":74}},{"value":"/ behavior.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":34094,"byte_end":34107,"line_start":42,"line_end":42,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":34108,"byte_end":34111,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ Informally, by implementing it, you're asserting that `C` is identical to","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":34112,"byte_end":34189,"line_start":44,"line_end":44,"column_start":1,"column_end":78}},{"value":"/ the integral type `C::Int`, and that every `C` falls between `C::MIN_VALUE`","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":34190,"byte_end":34269,"line_start":45,"line_end":45,"column_start":1,"column_end":80}},{"value":"/ and `C::MAX_VALUE` exactly once, without any gaps.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":34270,"byte_end":34324,"line_start":46,"line_end":46,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":34325,"byte_end":34328,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Precisely, the guarantees you must uphold when implementing `Contiguous` for","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":34329,"byte_end":34409,"line_start":48,"line_end":48,"column_start":1,"column_end":81}},{"value":"/ some type `C` are:","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":34410,"byte_end":34432,"line_start":49,"line_end":49,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":34433,"byte_end":34436,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ 1. The size of `C` and `C::Int` must be the same, and neither may be a ZST.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":34437,"byte_end":34517,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"/    (Note: alignment is explicitly allowed to differ)","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":34518,"byte_end":34574,"line_start":52,"line_end":52,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":34575,"byte_end":34578,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ 2. `C::Int` must be a primitive integer, and not a wrapper type. In the","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":34579,"byte_end":34654,"line_start":54,"line_end":54,"column_start":1,"column_end":76}},{"value":"/    future, this may be lifted to include cases where the behavior is","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":34655,"byte_end":34727,"line_start":55,"line_end":55,"column_start":1,"column_end":73}},{"value":"/    identical for a relevant set of traits (Ord, arithmetic, ...).","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":34728,"byte_end":34797,"line_start":56,"line_end":56,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":34798,"byte_end":34801,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ 3. All `C::Int`s which are in the *inclusive* range between `C::MIN_VALUE`","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":34802,"byte_end":34880,"line_start":58,"line_end":58,"column_start":1,"column_end":79}},{"value":"/    and `C::MAX_VALUE` are bitwise identical to unique valid instances of","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":34881,"byte_end":34957,"line_start":59,"line_end":59,"column_start":1,"column_end":77}},{"value":"/    `C`.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":34958,"byte_end":34969,"line_start":60,"line_end":60,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":34970,"byte_end":34973,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ 4. There exist no instances of `C` such that their bitpatterns, when","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":34974,"byte_end":35046,"line_start":62,"line_end":62,"column_start":1,"column_end":73}},{"value":"/    interpreted as instances of `C::Int`, fall outside of the `MAX_VALUE` /","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":35047,"byte_end":35125,"line_start":63,"line_end":63,"column_start":1,"column_end":79}},{"value":"/    `MIN_VALUE` range -- It is legal for unsafe code to assume that if it","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":35126,"byte_end":35202,"line_start":64,"line_end":64,"column_start":1,"column_end":77}},{"value":"/    gets a `C` that implements `Contiguous`, it is in the appropriate range.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":35203,"byte_end":35282,"line_start":65,"line_end":65,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":35283,"byte_end":35286,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ 5. Finally, you promise not to provide overridden implementations of","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":35287,"byte_end":35359,"line_start":67,"line_end":67,"column_start":1,"column_end":73}},{"value":"/    `Contiguous::from_integer` and `Contiguous::into_integer`.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":35360,"byte_end":35425,"line_start":68,"line_end":68,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":35426,"byte_end":35429,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ For clarity, the following rules could be derived from the above, but are","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":35430,"byte_end":35507,"line_start":70,"line_end":70,"column_start":1,"column_end":78}},{"value":"/ listed explicitly:","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":35508,"byte_end":35530,"line_start":71,"line_end":71,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":35531,"byte_end":35534,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ - `C::MAX_VALUE` must be greater or equal to `C::MIN_VALUE` (therefore, `C`","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":35535,"byte_end":35614,"line_start":73,"line_end":73,"column_start":1,"column_end":80}},{"value":"/   must be an inhabited type).","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":35615,"byte_end":35648,"line_start":74,"line_end":74,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":35649,"byte_end":35652,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ - There exist no two values between `MIN_VALUE` and `MAX_VALUE` such that","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":35653,"byte_end":35730,"line_start":76,"line_end":76,"column_start":1,"column_end":78}},{"value":"/   when interpreted as a `C` they are considered identical (by, say, match).","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":35731,"byte_end":35810,"line_start":77,"line_end":77,"column_start":1,"column_end":80}}]},{"kind":"Type","id":{"krate":0,"index":214},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":36663,"byte_end":36666,"line_start":96,"line_end":96,"column_start":8,"column_end":11},"name":"Int","qualname":"::contiguous::Contiguous::Int","value":"type Int: Copy + Ord;","parent":{"krate":0,"index":213},"children":[],"decl_id":null,"docs":" The primitive integer type with an identical representation to this\n type.","sig":null,"attributes":[{"value":"/ The primitive integer type with an identical representation to this","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":35859,"byte_end":35930,"line_start":79,"line_end":79,"column_start":3,"column_end":74}},{"value":"/ type.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":35933,"byte_end":35942,"line_start":80,"line_end":80,"column_start":3,"column_end":12}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":35945,"byte_end":35948,"line_start":81,"line_end":81,"column_start":3,"column_end":6}},{"value":"/ Contiguous is broadly intended for use with fieldless enums, and for","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":35951,"byte_end":36023,"line_start":82,"line_end":82,"column_start":3,"column_end":75}},{"value":"/ these the correct integer type is easy: The enum should have a","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":36026,"byte_end":36092,"line_start":83,"line_end":83,"column_start":3,"column_end":69}},{"value":"/ `#[repr(Int)]` or `#[repr(C)]` attribute, (if it does not, it is","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":36095,"byte_end":36163,"line_start":84,"line_end":84,"column_start":3,"column_end":71}},{"value":"/ *unsound* to implement `Contiguous`!).","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":36166,"byte_end":36208,"line_start":85,"line_end":85,"column_start":3,"column_end":45}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":36211,"byte_end":36214,"line_start":86,"line_end":86,"column_start":3,"column_end":6}},{"value":"/ - For `#[repr(Int)]`, use the listed `Int`. e.g. `#[repr(u8)]` should use","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":36217,"byte_end":36294,"line_start":87,"line_end":87,"column_start":3,"column_end":80}},{"value":"/   `type Int = u8`.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":36297,"byte_end":36319,"line_start":88,"line_end":88,"column_start":3,"column_end":25}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":36322,"byte_end":36325,"line_start":89,"line_end":89,"column_start":3,"column_end":6}},{"value":"/ - For `#[repr(C)]`, use whichever type the C compiler will use to","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":36328,"byte_end":36397,"line_start":90,"line_end":90,"column_start":3,"column_end":72}},{"value":"/   represent the given enum. This is usually `c_int` (from `std::os::raw`","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":36400,"byte_end":36476,"line_start":91,"line_end":91,"column_start":3,"column_end":79}},{"value":"/   or `libc`), but it's up to you to make the determination as the","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":36479,"byte_end":36548,"line_start":92,"line_end":92,"column_start":3,"column_end":72}},{"value":"/   implementer of the unsafe trait.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":36551,"byte_end":36589,"line_start":93,"line_end":93,"column_start":3,"column_end":41}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":36592,"byte_end":36595,"line_start":94,"line_end":94,"column_start":3,"column_end":6}},{"value":"/ For precise rules, see the list under \"Safety\" above.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":36598,"byte_end":36655,"line_start":95,"line_end":95,"column_start":3,"column_end":60}}]},{"kind":"Const","id":{"krate":0,"index":215},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":36757,"byte_end":36766,"line_start":99,"line_end":99,"column_start":9,"column_end":18},"name":"MAX_VALUE","qualname":"::contiguous::Contiguous::MAX_VALUE","value":"Self::Int","parent":{"krate":0,"index":213},"children":[],"decl_id":null,"docs":" The upper *inclusive* bound for valid instances of this type.\n","sig":null,"attributes":[{"value":"/ The upper *inclusive* bound for valid instances of this type.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":36683,"byte_end":36748,"line_start":98,"line_end":98,"column_start":3,"column_end":68}}]},{"kind":"Const","id":{"krate":0,"index":216},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":36856,"byte_end":36865,"line_start":102,"line_end":102,"column_start":9,"column_end":18},"name":"MIN_VALUE","qualname":"::contiguous::Contiguous::MIN_VALUE","value":"Self::Int","parent":{"krate":0,"index":213},"children":[],"decl_id":null,"docs":" The lower *inclusive* bound for valid instances of this type.\n","sig":null,"attributes":[{"value":"/ The lower *inclusive* bound for valid instances of this type.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":36782,"byte_end":36847,"line_start":101,"line_end":101,"column_start":3,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":37530,"byte_end":37542,"line_start":119,"line_end":119,"column_start":6,"column_end":18},"name":"from_integer","qualname":"::contiguous::Contiguous::from_integer","value":"pub fn from_integer(Self::Int) -> Option<Self>","parent":{"krate":0,"index":213},"children":[],"decl_id":null,"docs":" If `value` is within the range for valid instances of this type,\n returns `Some(converted_value)`, otherwise, returns `None`.","sig":null,"attributes":[{"value":"/ If `value` is within the range for valid instances of this type,","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":36881,"byte_end":36949,"line_start":104,"line_end":104,"column_start":3,"column_end":71}},{"value":"/ returns `Some(converted_value)`, otherwise, returns `None`.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":36952,"byte_end":37015,"line_start":105,"line_end":105,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":37018,"byte_end":37021,"line_start":106,"line_end":106,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `value.into_integer()` in","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":37024,"byte_end":37098,"line_start":107,"line_end":107,"column_start":3,"column_end":77}},{"value":"/ your code. It is a contract of this trait that if you implement","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":37101,"byte_end":37168,"line_start":108,"line_end":108,"column_start":3,"column_end":70}},{"value":"/ `Contiguous` on your type you **must not** override this method.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":37171,"byte_end":37239,"line_start":109,"line_end":109,"column_start":3,"column_end":71}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":37242,"byte_end":37245,"line_start":110,"line_end":110,"column_start":3,"column_end":6}},{"value":"/ # Panics","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":37248,"byte_end":37260,"line_start":111,"line_end":111,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":37263,"byte_end":37266,"line_start":112,"line_end":112,"column_start":3,"column_end":6}},{"value":"/ We will not panic for any correct implementation of `Contiguous`, but","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":37269,"byte_end":37342,"line_start":113,"line_end":113,"column_start":3,"column_end":76}},{"value":"/ *may* panic if we detect an incorrect one.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":37345,"byte_end":37391,"line_start":114,"line_end":114,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":37394,"byte_end":37397,"line_start":115,"line_end":115,"column_start":3,"column_end":6}},{"value":"/ This is undefined behavior regardless, so it could have been the nasal","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":37400,"byte_end":37474,"line_start":116,"line_end":116,"column_start":3,"column_end":77}},{"value":"/ demons at that point anyway ;).","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":37477,"byte_end":37512,"line_start":117,"line_end":117,"column_start":3,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":37515,"byte_end":37524,"line_start":118,"line_end":118,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":39065,"byte_end":39077,"line_start":154,"line_end":154,"column_start":6,"column_end":18},"name":"into_integer","qualname":"::contiguous::Contiguous::into_integer","value":"pub fn into_integer(Self) -> Self::Int","parent":{"krate":0,"index":213},"children":[],"decl_id":null,"docs":" Perform the conversion from `C` into the underlying integral type. This\n mostly exists otherwise generic code would need unsafe for the `value as\n integer`","sig":null,"attributes":[{"value":"/ Perform the conversion from `C` into the underlying integral type. This","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":38381,"byte_end":38456,"line_start":138,"line_end":138,"column_start":3,"column_end":78}},{"value":"/ mostly exists otherwise generic code would need unsafe for the `value as","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":38459,"byte_end":38535,"line_start":139,"line_end":139,"column_start":3,"column_end":79}},{"value":"/ integer`","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":38538,"byte_end":38550,"line_start":140,"line_end":140,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":38553,"byte_end":38556,"line_start":141,"line_end":141,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `value.into_integer()` in","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":38559,"byte_end":38633,"line_start":142,"line_end":142,"column_start":3,"column_end":77}},{"value":"/ your code. It is a contract of this trait that if you implement","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":38636,"byte_end":38703,"line_start":143,"line_end":143,"column_start":3,"column_end":70}},{"value":"/ `Contiguous` on your type you **must not** override this method.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":38706,"byte_end":38774,"line_start":144,"line_end":144,"column_start":3,"column_end":71}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":38777,"byte_end":38780,"line_start":145,"line_end":145,"column_start":3,"column_end":6}},{"value":"/ # Panics","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":38783,"byte_end":38795,"line_start":146,"line_end":146,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":38798,"byte_end":38801,"line_start":147,"line_end":147,"column_start":3,"column_end":6}},{"value":"/ We will not panic for any correct implementation of `Contiguous`, but","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":38804,"byte_end":38877,"line_start":148,"line_end":148,"column_start":3,"column_end":76}},{"value":"/ *may* panic if we detect an incorrect one.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":38880,"byte_end":38926,"line_start":149,"line_end":149,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":38929,"byte_end":38932,"line_start":150,"line_end":150,"column_start":3,"column_end":6}},{"value":"/ This is undefined behavior regardless, so it could have been the nasal","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":38935,"byte_end":39009,"line_start":151,"line_end":151,"column_start":3,"column_end":77}},{"value":"/ demons at that point anyway ;).","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":39012,"byte_end":39047,"line_start":152,"line_end":152,"column_start":3,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":39050,"byte_end":39059,"line_start":153,"line_end":153,"column_start":3,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":226},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":49211,"byte_end":49229,"line_start":87,"line_end":87,"column_start":18,"column_end":36},"name":"TransparentWrapper","qualname":"::transparent::TransparentWrapper","value":"TransparentWrapper<Inner: ?Sized>","parent":null,"children":[{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237}],"decl_id":null,"docs":" A trait which indicates that a type is a `#[repr(transparent)]` wrapper\n around the `Inner` value.","sig":null,"attributes":[{"value":"/ A trait which indicates that a type is a `#[repr(transparent)]` wrapper","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":46122,"byte_end":46197,"line_start":3,"line_end":3,"column_start":1,"column_end":76}},{"value":"/ around the `Inner` value.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":46198,"byte_end":46227,"line_start":4,"line_end":4,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":46228,"byte_end":46231,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This allows safely copy transmuting between the `Inner` type and the","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":46232,"byte_end":46304,"line_start":6,"line_end":6,"column_start":1,"column_end":73}},{"value":"/ `TransparentWrapper` type. Functions like `wrap_{}` convert from the inner","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":46305,"byte_end":46383,"line_start":7,"line_end":7,"column_start":1,"column_end":79}},{"value":"/ type to the wrapper type and `peel_{}` functions do the inverse conversion","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":46384,"byte_end":46462,"line_start":8,"line_end":8,"column_start":1,"column_end":79}},{"value":"/ from the wrapper type to the inner type. We deliberately do not call the","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":46463,"byte_end":46539,"line_start":9,"line_end":9,"column_start":1,"column_end":77}},{"value":"/ wrapper-removing methods \"unwrap\" because at this point that word is too","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":46540,"byte_end":46616,"line_start":10,"line_end":10,"column_start":1,"column_end":77}},{"value":"/ strongly tied to the Option/ Result methods.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":46617,"byte_end":46665,"line_start":11,"line_end":11,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":46666,"byte_end":46669,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":46670,"byte_end":46682,"line_start":13,"line_end":13,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":46683,"byte_end":46686,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ The safety contract of `TransparentWrapper` is relatively simple:","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":46687,"byte_end":46756,"line_start":15,"line_end":15,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":46757,"byte_end":46760,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ For a given `Wrapper` which implements `TransparentWrapper<Inner>`:","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":46761,"byte_end":46832,"line_start":17,"line_end":17,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":46833,"byte_end":46836,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ 1. `Wrapper` must be a wrapper around `Inner` with an identical data","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":46837,"byte_end":46909,"line_start":19,"line_end":19,"column_start":1,"column_end":73}},{"value":"/    representations. This    either means that it must be a","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":46910,"byte_end":46972,"line_start":20,"line_end":20,"column_start":1,"column_end":63}},{"value":"/    `#[repr(transparent)]` struct which    contains a either a field of type","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":46973,"byte_end":47052,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/    `Inner` (or a field of some other    transparent wrapper for `Inner`) as","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":47053,"byte_end":47132,"line_start":22,"line_end":22,"column_start":1,"column_end":80}},{"value":"/    the only non-ZST field.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":47133,"byte_end":47163,"line_start":23,"line_end":23,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":47164,"byte_end":47167,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ 2. Any fields *other* than the `Inner` field must be trivially constructable","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":47168,"byte_end":47248,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/    ZSTs, for example `PhantomData`, `PhantomPinned`, etc.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":47249,"byte_end":47310,"line_start":26,"line_end":26,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":47311,"byte_end":47314,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ 3. The `Wrapper` may not impose additional alignment requirements over","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":47315,"byte_end":47389,"line_start":28,"line_end":28,"column_start":1,"column_end":75}},{"value":"/    `Inner`.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":47390,"byte_end":47405,"line_start":29,"line_end":29,"column_start":1,"column_end":16}},{"value":"/     - Note: this is currently guaranteed by `repr(transparent)`, but there","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":47406,"byte_end":47484,"line_start":30,"line_end":30,"column_start":1,"column_end":79}},{"value":"/       have been discussions of lifting it, so it's stated here explicitly.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":47485,"byte_end":47563,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":47564,"byte_end":47567,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ 4. All functions on `TransparentWrapper` **may not** be overridden.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":47568,"byte_end":47639,"line_start":33,"line_end":33,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":47640,"byte_end":47643,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ## Caveats","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":47644,"byte_end":47658,"line_start":35,"line_end":35,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":47659,"byte_end":47662,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ If the wrapper imposes additional constraints upon the inner type which are","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":47663,"byte_end":47742,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/ required for safety, it's responsible for ensuring those still hold -- this","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":47743,"byte_end":47822,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/ generally requires preventing access to instances of the inner type, as","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":47823,"byte_end":47898,"line_start":39,"line_end":39,"column_start":1,"column_end":76}},{"value":"/ implementing `TransparentWrapper<U> for T` means anybody can call","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":47899,"byte_end":47968,"line_start":40,"line_end":40,"column_start":1,"column_end":70}},{"value":"/ `T::cast_ref(any_instance_of_u)`.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":47969,"byte_end":48006,"line_start":41,"line_end":41,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":48007,"byte_end":48010,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ For example, it would be invalid to implement TransparentWrapper for `str`","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":48011,"byte_end":48089,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/ to implement `TransparentWrapper` around `[u8]` because of this.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":48090,"byte_end":48158,"line_start":44,"line_end":44,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":48159,"byte_end":48162,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":48163,"byte_end":48177,"line_start":46,"line_end":46,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":48178,"byte_end":48181,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ ## Basic","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":48182,"byte_end":48194,"line_start":48,"line_end":48,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":48195,"byte_end":48198,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":48199,"byte_end":48206,"line_start":50,"line_end":50,"column_start":1,"column_end":8}},{"value":"/ use bytemuck::TransparentWrapper;","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":48207,"byte_end":48244,"line_start":51,"line_end":51,"column_start":1,"column_end":38}},{"value":"/ # #[derive(Default)]","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":48245,"byte_end":48269,"line_start":52,"line_end":52,"column_start":1,"column_end":25}},{"value":"/ # struct SomeStruct(u32);","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":48270,"byte_end":48299,"line_start":53,"line_end":53,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":48300,"byte_end":48303,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ #[repr(transparent)]","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":48304,"byte_end":48328,"line_start":55,"line_end":55,"column_start":1,"column_end":25}},{"value":"/ struct MyWrapper(SomeStruct);","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":48329,"byte_end":48362,"line_start":56,"line_end":56,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":48363,"byte_end":48366,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ unsafe impl TransparentWrapper<SomeStruct> for MyWrapper {}","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":48367,"byte_end":48430,"line_start":58,"line_end":58,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":48431,"byte_end":48434,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ // interpret a reference to &SomeStruct as a &MyWrapper","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":48435,"byte_end":48494,"line_start":60,"line_end":60,"column_start":1,"column_end":60}},{"value":"/ let thing = SomeStruct::default();","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":48495,"byte_end":48533,"line_start":61,"line_end":61,"column_start":1,"column_end":39}},{"value":"/ let inner_ref: &MyWrapper = MyWrapper::wrap_ref(&thing);","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":48534,"byte_end":48594,"line_start":62,"line_end":62,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":48595,"byte_end":48598,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ // Works with &mut too.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":48599,"byte_end":48626,"line_start":64,"line_end":64,"column_start":1,"column_end":28}},{"value":"/ let mut mut_thing = SomeStruct::default();","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":48627,"byte_end":48673,"line_start":65,"line_end":65,"column_start":1,"column_end":47}},{"value":"/ let inner_mut: &mut MyWrapper = MyWrapper::wrap_mut(&mut mut_thing);","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":48674,"byte_end":48746,"line_start":66,"line_end":66,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":48747,"byte_end":48750,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ # let _ = (inner_ref, inner_mut); // silence warnings","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":48751,"byte_end":48808,"line_start":68,"line_end":68,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":48809,"byte_end":48816,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":48817,"byte_end":48820,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ ## Use with dynamically sized types","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":48821,"byte_end":48860,"line_start":71,"line_end":71,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":48861,"byte_end":48864,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":48865,"byte_end":48872,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"/ use bytemuck::TransparentWrapper;","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":48873,"byte_end":48910,"line_start":74,"line_end":74,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":48911,"byte_end":48914,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ #[repr(transparent)]","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":48915,"byte_end":48939,"line_start":76,"line_end":76,"column_start":1,"column_end":25}},{"value":"/ struct Slice<T>([T]);","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":48940,"byte_end":48965,"line_start":77,"line_end":77,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":48966,"byte_end":48969,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ unsafe impl<T> TransparentWrapper<[T]> for Slice<T> {}","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":48970,"byte_end":49028,"line_start":79,"line_end":79,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":49029,"byte_end":49032,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ let s = Slice::wrap_ref(&[1u32, 2, 3]);","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":49033,"byte_end":49076,"line_start":81,"line_end":81,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(&s.0, &[1, 2, 3]);","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":49077,"byte_end":49110,"line_start":82,"line_end":82,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":49111,"byte_end":49114,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [1, 2, 3u8];","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":49115,"byte_end":49145,"line_start":84,"line_end":84,"column_start":1,"column_end":31}},{"value":"/ let sm = Slice::wrap_mut(&mut buf);","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":49146,"byte_end":49185,"line_start":85,"line_end":85,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":49186,"byte_end":49193,"line_start":86,"line_end":86,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":49316,"byte_end":49320,"line_start":90,"line_end":90,"column_start":6,"column_end":10},"name":"wrap","qualname":"::transparent::TransparentWrapper::wrap","value":"pub fn wrap(Inner) -> Self where Self: Sized, Inner: Sized","parent":{"krate":0,"index":226},"children":[],"decl_id":null,"docs":" Convert the inner type into the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert the inner type into the wrapper type.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":49249,"byte_end":49298,"line_start":88,"line_end":88,"column_start":3,"column_end":52}},{"value":"inline","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":49301,"byte_end":49310,"line_start":89,"line_end":89,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":49632,"byte_end":49640,"line_start":103,"line_end":103,"column_start":6,"column_end":14},"name":"wrap_ref","qualname":"::transparent::TransparentWrapper::wrap_ref","value":"pub fn wrap_ref(&Inner) -> &Self","parent":{"krate":0,"index":226},"children":[],"decl_id":null,"docs":" Convert a reference to the inner type into a reference to the wrapper\n type.\n","sig":null,"attributes":[{"value":"/ Convert a reference to the inner type into a reference to the wrapper","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":49529,"byte_end":49602,"line_start":100,"line_end":100,"column_start":3,"column_end":76}},{"value":"/ type.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":49605,"byte_end":49614,"line_start":101,"line_end":101,"column_start":3,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":49617,"byte_end":49626,"line_start":102,"line_end":102,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":50330,"byte_end":50338,"line_start":121,"line_end":121,"column_start":6,"column_end":14},"name":"wrap_mut","qualname":"::transparent::TransparentWrapper::wrap_mut","value":"pub fn wrap_mut(&mut Inner) -> &mut Self","parent":{"krate":0,"index":226},"children":[],"decl_id":null,"docs":" Convert a mutable reference to the inner type into a mutable reference to\n the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable reference to the inner type into a mutable reference to","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":50211,"byte_end":50288,"line_start":118,"line_end":118,"column_start":3,"column_end":80}},{"value":"/ the wrapper type.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":50291,"byte_end":50312,"line_start":119,"line_end":119,"column_start":3,"column_end":24}},{"value":"inline","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":50315,"byte_end":50324,"line_start":120,"line_end":120,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":231},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":51002,"byte_end":51012,"line_start":138,"line_end":138,"column_start":6,"column_end":16},"name":"wrap_slice","qualname":"::transparent::TransparentWrapper::wrap_slice","value":"pub fn wrap_slice(&[Inner]) -> &[Self] where Self: Sized, Inner: Sized","parent":{"krate":0,"index":226},"children":[],"decl_id":null,"docs":" Convert a slice to the inner type into a slice to the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a slice to the inner type into a slice to the wrapper type.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":50913,"byte_end":50984,"line_start":136,"line_end":136,"column_start":3,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":50987,"byte_end":50996,"line_start":137,"line_end":137,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":51556,"byte_end":51570,"line_start":155,"line_end":155,"column_start":6,"column_end":20},"name":"wrap_slice_mut","qualname":"::transparent::TransparentWrapper::wrap_slice_mut","value":"pub fn wrap_slice_mut(&mut [Inner]) -> &mut [Self] where Self: Sized,\nInner: Sized","parent":{"krate":0,"index":226},"children":[],"decl_id":null,"docs":" Convert a mutable slice to the inner type into a mutable slice to the\n wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable slice to the inner type into a mutable slice to the","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":51445,"byte_end":51518,"line_start":152,"line_end":152,"column_start":3,"column_end":76}},{"value":"/ wrapper type.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":51521,"byte_end":51538,"line_start":153,"line_end":153,"column_start":3,"column_end":20}},{"value":"inline","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":51541,"byte_end":51550,"line_start":154,"line_end":154,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":233},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":52076,"byte_end":52080,"line_start":171,"line_end":171,"column_start":6,"column_end":10},"name":"peel","qualname":"::transparent::TransparentWrapper::peel","value":"pub fn peel(Self) -> Inner where Self: Sized, Inner: Sized","parent":{"krate":0,"index":226},"children":[],"decl_id":null,"docs":" Convert the wrapper type into the inner type.\n","sig":null,"attributes":[{"value":"/ Convert the wrapper type into the inner type.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":52009,"byte_end":52058,"line_start":169,"line_end":169,"column_start":3,"column_end":52}},{"value":"inline","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":52061,"byte_end":52070,"line_start":170,"line_end":170,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":52285,"byte_end":52293,"line_start":182,"line_end":182,"column_start":6,"column_end":14},"name":"peel_ref","qualname":"::transparent::TransparentWrapper::peel_ref","value":"pub fn peel_ref(&Self) -> &Inner","parent":{"krate":0,"index":226},"children":[],"decl_id":null,"docs":" Convert a reference to the wrapper type into a reference to the inner\n type.\n","sig":null,"attributes":[{"value":"/ Convert a reference to the wrapper type into a reference to the inner","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":52182,"byte_end":52255,"line_start":179,"line_end":179,"column_start":3,"column_end":76}},{"value":"/ type.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":52258,"byte_end":52267,"line_start":180,"line_end":180,"column_start":3,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":52270,"byte_end":52279,"line_start":181,"line_end":181,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":52983,"byte_end":52991,"line_start":200,"line_end":200,"column_start":6,"column_end":14},"name":"peel_mut","qualname":"::transparent::TransparentWrapper::peel_mut","value":"pub fn peel_mut(&mut Self) -> &mut Inner","parent":{"krate":0,"index":226},"children":[],"decl_id":null,"docs":" Convert a mutable reference to the wrapper type into a mutable reference\n to the inner type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable reference to the wrapper type into a mutable reference","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":52864,"byte_end":52940,"line_start":197,"line_end":197,"column_start":3,"column_end":79}},{"value":"/ to the inner type.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":52943,"byte_end":52965,"line_start":198,"line_end":198,"column_start":3,"column_end":25}},{"value":"inline","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":52968,"byte_end":52977,"line_start":199,"line_end":199,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":53655,"byte_end":53665,"line_start":217,"line_end":217,"column_start":6,"column_end":16},"name":"peel_slice","qualname":"::transparent::TransparentWrapper::peel_slice","value":"pub fn peel_slice(&[Self]) -> &[Inner] where Self: Sized, Inner: Sized","parent":{"krate":0,"index":226},"children":[],"decl_id":null,"docs":" Convert a slice to the wrapped type into a slice to the inner type.\n","sig":null,"attributes":[{"value":"/ Convert a slice to the wrapped type into a slice to the inner type.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":53566,"byte_end":53637,"line_start":215,"line_end":215,"column_start":3,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":53640,"byte_end":53649,"line_start":216,"line_end":216,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":54210,"byte_end":54224,"line_start":234,"line_end":234,"column_start":6,"column_end":20},"name":"peel_slice_mut","qualname":"::transparent::TransparentWrapper::peel_slice_mut","value":"pub fn peel_slice_mut(&mut [Self]) -> &mut [Inner] where Self: Sized,\nInner: Sized","parent":{"krate":0,"index":226},"children":[],"decl_id":null,"docs":" Convert a mutable slice to the wrapped type into a mutable slice to the\n inner type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable slice to the wrapped type into a mutable slice to the","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":54099,"byte_end":54174,"line_start":231,"line_end":231,"column_start":3,"column_end":78}},{"value":"/ inner type.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":54177,"byte_end":54192,"line_start":232,"line_end":232,"column_start":3,"column_end":18}},{"value":"inline","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":54195,"byte_end":54204,"line_start":233,"line_end":233,"column_start":3,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":242},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":4535,"byte_end":4543,"line_start":134,"line_end":134,"column_start":8,"column_end":16},"name":"bytes_of","qualname":"::bytes_of","value":"pub fn bytes_of<T: Pod>(&T) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&T` as `&[u8]`.","sig":null,"attributes":[{"value":"/ Re-interprets `&T` as `&[u8]`.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":4326,"byte_end":4360,"line_start":129,"line_end":129,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":4361,"byte_end":4364,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ Any ZST becomes an empty slice, and in that case the pointer value of that","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":4365,"byte_end":4443,"line_start":131,"line_end":131,"column_start":1,"column_end":79}},{"value":"/ empty slice might not match the pointer value of the input reference.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":4444,"byte_end":4517,"line_start":132,"line_end":132,"column_start":1,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":4518,"byte_end":4527,"line_start":133,"line_end":133,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":244},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":4958,"byte_end":4970,"line_start":150,"line_end":150,"column_start":8,"column_end":20},"name":"bytes_of_mut","qualname":"::bytes_of_mut","value":"pub fn bytes_of_mut<T: Pod>(&mut T) -> &mut [u8]","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut T` as `&mut [u8]`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut T` as `&mut [u8]`.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":4741,"byte_end":4783,"line_start":145,"line_end":145,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":4784,"byte_end":4787,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ Any ZST becomes an empty slice, and in that case the pointer value of that","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":4788,"byte_end":4866,"line_start":147,"line_end":147,"column_start":1,"column_end":79}},{"value":"/ empty slice might not match the pointer value of the input reference.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":4867,"byte_end":4940,"line_start":148,"line_end":148,"column_start":1,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":4941,"byte_end":4950,"line_start":149,"line_end":149,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":246},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":5314,"byte_end":5324,"line_start":167,"line_end":167,"column_start":8,"column_end":18},"name":"from_bytes","qualname":"::from_bytes","value":"pub fn from_bytes<T: Pod>(&[u8]) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":5184,"byte_end":5218,"line_start":161,"line_end":161,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":5219,"byte_end":5222,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":5223,"byte_end":5236,"line_start":163,"line_end":163,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":5237,"byte_end":5240,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes`] but will panic on error.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":5241,"byte_end":5296,"line_start":165,"line_end":165,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":5297,"byte_end":5306,"line_start":166,"line_end":166,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":248},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":5597,"byte_end":5611,"line_start":180,"line_end":180,"column_start":8,"column_end":22},"name":"from_bytes_mut","qualname":"::from_bytes_mut","value":"pub fn from_bytes_mut<T: Pod>(&mut [u8]) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":5455,"byte_end":5497,"line_start":174,"line_end":174,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":5498,"byte_end":5501,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":5502,"byte_end":5515,"line_start":176,"line_end":176,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":5516,"byte_end":5519,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes_mut`] but will panic on error.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":5520,"byte_end":5579,"line_start":178,"line_end":178,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":5580,"byte_end":5589,"line_start":179,"line_end":179,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":250},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":5952,"byte_end":5966,"line_start":194,"line_end":194,"column_start":8,"column_end":22},"name":"try_from_bytes","qualname":"::try_from_bytes","value":"pub fn try_from_bytes<T: Pod>(&[u8]) -> Result<&T, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":5758,"byte_end":5792,"line_start":187,"line_end":187,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":5793,"byte_end":5796,"line_start":188,"line_end":188,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":5797,"byte_end":5811,"line_start":189,"line_end":189,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":5812,"byte_end":5815,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":5816,"byte_end":5865,"line_start":191,"line_end":191,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":5866,"byte_end":5934,"line_start":192,"line_end":192,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":5935,"byte_end":5944,"line_start":193,"line_end":193,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":252},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":6473,"byte_end":6491,"line_start":211,"line_end":211,"column_start":8,"column_end":26},"name":"try_from_bytes_mut","qualname":"::try_from_bytes_mut","value":"pub fn try_from_bytes_mut<T: Pod>(&mut [u8]) -> Result<&mut T, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":6271,"byte_end":6313,"line_start":204,"line_end":204,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":6314,"byte_end":6317,"line_start":205,"line_end":205,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":6318,"byte_end":6332,"line_start":206,"line_end":206,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":6333,"byte_end":6336,"line_start":207,"line_end":207,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":6337,"byte_end":6386,"line_start":208,"line_end":208,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":6387,"byte_end":6455,"line_start":209,"line_end":209,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":6456,"byte_end":6465,"line_start":210,"line_end":210,"column_start":1,"column_end":10}}]},{"kind":"TupleVariant","id":{"krate":0,"index":623},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":7089,"byte_end":7129,"line_start":228,"line_end":228,"column_start":3,"column_end":43},"name":"TargetAlignmentGreaterAndInputNotAligned","qualname":"::PodCastError::TargetAlignmentGreaterAndInputNotAligned","value":"PodCastError::TargetAlignmentGreaterAndInputNotAligned","parent":{"krate":0,"index":622},"children":[],"decl_id":null,"docs":" You tried to cast a slice to an element type with a higher alignment\n requirement but the slice wasn't aligned.\n","sig":null,"attributes":[{"value":"/ You tried to cast a slice to an element type with a higher alignment","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":6966,"byte_end":7038,"line_start":226,"line_end":226,"column_start":3,"column_end":75}},{"value":"/ requirement but the slice wasn't aligned.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":7041,"byte_end":7086,"line_start":227,"line_end":227,"column_start":3,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":625},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":7315,"byte_end":7339,"line_start":232,"line_end":232,"column_start":3,"column_end":27},"name":"OutputSliceWouldHaveSlop","qualname":"::PodCastError::OutputSliceWouldHaveSlop","value":"PodCastError::OutputSliceWouldHaveSlop","parent":{"krate":0,"index":622},"children":[],"decl_id":null,"docs":" If the element size changes then the output slice changes length\n accordingly. If the output slice wouldn't be a whole number of elements\n then the conversion fails.\n","sig":null,"attributes":[{"value":"/ If the element size changes then the output slice changes length","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":7133,"byte_end":7201,"line_start":229,"line_end":229,"column_start":3,"column_end":71}},{"value":"/ accordingly. If the output slice wouldn't be a whole number of elements","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":7204,"byte_end":7279,"line_start":230,"line_end":230,"column_start":3,"column_end":78}},{"value":"/ then the conversion fails.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":7282,"byte_end":7312,"line_start":231,"line_end":231,"column_start":3,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":627},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":7560,"byte_end":7572,"line_start":236,"line_end":236,"column_start":3,"column_end":15},"name":"SizeMismatch","qualname":"::PodCastError::SizeMismatch","value":"PodCastError::SizeMismatch","parent":{"krate":0,"index":622},"children":[],"decl_id":null,"docs":" When casting a slice you can't convert between ZST elements and non-ZST\n elements. When casting an individual `T`, `&T`, or `&mut T` value the\n source size and destination size must be an exact match.\n","sig":null,"attributes":[{"value":"/ When casting a slice you can't convert between ZST elements and non-ZST","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":7343,"byte_end":7418,"line_start":233,"line_end":233,"column_start":3,"column_end":78}},{"value":"/ elements. When casting an individual `T`, `&T`, or `&mut T` value the","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":7421,"byte_end":7494,"line_start":234,"line_end":234,"column_start":3,"column_end":76}},{"value":"/ source size and destination size must be an exact match.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":7497,"byte_end":7557,"line_start":235,"line_end":235,"column_start":3,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":629},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":7863,"byte_end":7880,"line_start":243,"line_end":243,"column_start":3,"column_end":20},"name":"AlignmentMismatch","qualname":"::PodCastError::AlignmentMismatch","value":"PodCastError::AlignmentMismatch","parent":{"krate":0,"index":622},"children":[],"decl_id":null,"docs":" For this type of cast the alignments must be exactly the same and they\n were not so now you're sad.","sig":null,"attributes":[{"value":"/ For this type of cast the alignments must be exactly the same and they","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":7576,"byte_end":7650,"line_start":237,"line_end":237,"column_start":3,"column_end":77}},{"value":"/ were not so now you're sad.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":7653,"byte_end":7684,"line_start":238,"line_end":238,"column_start":3,"column_end":34}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":7687,"byte_end":7690,"line_start":239,"line_end":239,"column_start":3,"column_end":6}},{"value":"/ This error is generated **only** by operations that cast allocated types","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":7693,"byte_end":7769,"line_start":240,"line_end":240,"column_start":3,"column_end":79}},{"value":"/ (such as `Box` and `Vec`), because in that case the alignment must stay","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":7772,"byte_end":7847,"line_start":241,"line_end":241,"column_start":3,"column_end":78}},{"value":"/ exact.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":7850,"byte_end":7860,"line_start":242,"line_end":242,"column_start":3,"column_end":13}}]},{"kind":"Enum","id":{"krate":0,"index":622},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":6949,"byte_end":6961,"line_start":225,"line_end":225,"column_start":10,"column_end":22},"name":"PodCastError","qualname":"::PodCastError","value":"pub enum PodCastError {\n    TargetAlignmentGreaterAndInputNotAligned,\n    OutputSliceWouldHaveSlop,\n    SizeMismatch,\n    AlignmentMismatch,\n}","parent":null,"children":[{"krate":0,"index":623},{"krate":0,"index":625},{"krate":0,"index":627},{"krate":0,"index":629}],"decl_id":null,"docs":" The things that can go wrong when casting between [`Pod`] data forms.\n","sig":null,"attributes":[{"value":"/ The things that can go wrong when casting between [`Pod`] data forms.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":6815,"byte_end":6888,"line_start":223,"line_end":223,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":256},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":8285,"byte_end":8289,"line_start":260,"line_end":260,"column_start":8,"column_end":12},"name":"cast","qualname":"::cast","value":"pub fn cast<A: Pod, B: Pod>(A) -> B","parent":null,"children":[],"decl_id":null,"docs":" Cast `T` into `U`","sig":null,"attributes":[{"value":"/ Cast `T` into `U`","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":8146,"byte_end":8167,"line_start":254,"line_end":254,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":8168,"byte_end":8171,"line_start":255,"line_end":255,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":8172,"byte_end":8185,"line_start":256,"line_end":256,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":8186,"byte_end":8189,"line_start":257,"line_end":257,"column_start":1,"column_end":4}},{"value":"/ * This is like [`try_cast`](try_cast), but will panic on a size mismatch.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":8190,"byte_end":8267,"line_start":258,"line_end":258,"column_start":1,"column_end":78}},{"value":"inline","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":8268,"byte_end":8277,"line_start":259,"line_end":259,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":259},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":8593,"byte_end":8601,"line_start":274,"line_end":274,"column_start":8,"column_end":16},"name":"cast_mut","qualname":"::cast_mut","value":"pub fn cast_mut<A: Pod, B: Pod>(&mut A) -> &mut B","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Cast `&mut T` into `&mut U`.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":8467,"byte_end":8499,"line_start":268,"line_end":268,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":8500,"byte_end":8503,"line_start":269,"line_end":269,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":8504,"byte_end":8517,"line_start":270,"line_end":270,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":8518,"byte_end":8521,"line_start":271,"line_end":271,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_mut`] but will panic on error.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":8522,"byte_end":8575,"line_start":272,"line_end":272,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":8576,"byte_end":8585,"line_start":273,"line_end":273,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":262},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":9121,"byte_end":9129,"line_start":295,"line_end":295,"column_start":8,"column_end":16},"name":"cast_ref","qualname":"::cast_ref","value":"pub fn cast_ref<A: Pod, B: Pod>(&A) -> &B","parent":null,"children":[],"decl_id":null,"docs":" Cast `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Cast `&T` into `&U`.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":9003,"byte_end":9027,"line_start":289,"line_end":289,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":9028,"byte_end":9031,"line_start":290,"line_end":290,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":9032,"byte_end":9045,"line_start":291,"line_end":291,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":9046,"byte_end":9049,"line_start":292,"line_end":292,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_ref`] but will panic on error.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":9050,"byte_end":9103,"line_start":293,"line_end":293,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":9104,"byte_end":9113,"line_start":294,"line_end":294,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":265},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":9647,"byte_end":9657,"line_start":316,"line_end":316,"column_start":8,"column_end":18},"name":"cast_slice","qualname":"::cast_slice","value":"pub fn cast_slice<A: Pod, B: Pod>(&[A]) -> &[B]","parent":null,"children":[],"decl_id":null,"docs":" Cast `&[A]` into `&[B]`.","sig":null,"attributes":[{"value":"/ Cast `&[A]` into `&[B]`.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":9523,"byte_end":9551,"line_start":310,"line_end":310,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":9552,"byte_end":9555,"line_start":311,"line_end":311,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":9556,"byte_end":9569,"line_start":312,"line_end":312,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":9570,"byte_end":9573,"line_start":313,"line_end":313,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice`] but will panic on error.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":9574,"byte_end":9629,"line_start":314,"line_end":314,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":9630,"byte_end":9639,"line_start":315,"line_end":315,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":268},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":9933,"byte_end":9947,"line_start":329,"line_end":329,"column_start":8,"column_end":22},"name":"cast_slice_mut","qualname":"::cast_slice_mut","value":"pub fn cast_slice_mut<A: Pod, B: Pod>(&mut [A]) -> &mut [B]","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut [T]` into `&mut [U]`.","sig":null,"attributes":[{"value":"/ Cast `&mut [T]` into `&mut [U]`.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":9797,"byte_end":9833,"line_start":323,"line_end":323,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":9834,"byte_end":9837,"line_start":324,"line_end":324,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":9838,"byte_end":9851,"line_start":325,"line_end":325,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":9852,"byte_end":9855,"line_start":326,"line_end":326,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice_mut`] but will panic on error.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":9856,"byte_end":9915,"line_start":327,"line_end":327,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":9916,"byte_end":9925,"line_start":328,"line_end":328,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":271},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":10178,"byte_end":10190,"line_start":338,"line_end":338,"column_start":8,"column_end":20},"name":"pod_align_to","qualname":"::pod_align_to","value":"pub fn pod_align_to<T: Pod, U: Pod>(&[T]) -> (&[T], &[U], &[T])","parent":null,"children":[],"decl_id":null,"docs":" As `align_to`, but safe because of the [`Pod`] bound.\n","sig":null,"attributes":[{"value":"/ As `align_to`, but safe because of the [`Pod`] bound.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":10103,"byte_end":10160,"line_start":336,"line_end":336,"column_start":1,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":10161,"byte_end":10170,"line_start":337,"line_end":337,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":274},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":10359,"byte_end":10375,"line_start":344,"line_end":344,"column_start":8,"column_end":24},"name":"pod_align_to_mut","qualname":"::pod_align_to_mut","value":"pub fn pod_align_to_mut<T: Pod, U: Pod>(&mut [T])\n-> (&mut [T], &mut [U], &mut [T])","parent":null,"children":[],"decl_id":null,"docs":" As `align_to_mut`, but safe because of the [`Pod`] bound.\n","sig":null,"attributes":[{"value":"/ As `align_to_mut`, but safe because of the [`Pod`] bound.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":10280,"byte_end":10341,"line_start":342,"line_end":342,"column_start":1,"column_end":62}},{"value":"inline","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":10342,"byte_end":10351,"line_start":343,"line_end":343,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":277},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":10877,"byte_end":10885,"line_start":361,"line_end":361,"column_start":8,"column_end":16},"name":"try_cast","qualname":"::try_cast","value":"pub fn try_cast<A: Pod, B: Pod>(A) -> Result<B, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to cast `T` into `U`.","sig":null,"attributes":[{"value":"/ Try to cast `T` into `U`.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":10490,"byte_end":10519,"line_start":350,"line_end":350,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":10520,"byte_end":10523,"line_start":351,"line_end":351,"column_start":1,"column_end":4}},{"value":"/ Note that for this particular type of cast, alignment isn't a factor. The","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":10524,"byte_end":10601,"line_start":352,"line_end":352,"column_start":1,"column_end":78}},{"value":"/ input value is semantically copied into the function and then returned to a","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":10602,"byte_end":10681,"line_start":353,"line_end":353,"column_start":1,"column_end":80}},{"value":"/ new memory location which will have whatever the required alignment of the","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":10682,"byte_end":10760,"line_start":354,"line_end":354,"column_start":1,"column_end":79}},{"value":"/ output type is.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":10761,"byte_end":10780,"line_start":355,"line_end":355,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":10781,"byte_end":10784,"line_start":356,"line_end":356,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":10785,"byte_end":10799,"line_start":357,"line_end":357,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":10800,"byte_end":10803,"line_start":358,"line_end":358,"column_start":1,"column_end":4}},{"value":"/ * If the types don't have the same size this fails.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":10804,"byte_end":10859,"line_start":359,"line_end":359,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":10860,"byte_end":10869,"line_start":360,"line_end":360,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":280},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":11257,"byte_end":11269,"line_start":376,"line_end":376,"column_start":8,"column_end":20},"name":"try_cast_ref","qualname":"::try_cast_ref","value":"pub fn try_cast_ref<A: Pod, B: Pod>(&A) -> Result<&B, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&T` into `&U`.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":11064,"byte_end":11100,"line_start":369,"line_end":369,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":11101,"byte_end":11104,"line_start":370,"line_end":370,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":11105,"byte_end":11119,"line_start":371,"line_end":371,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":11120,"byte_end":11123,"line_start":372,"line_end":372,"column_start":1,"column_end":4}},{"value":"/ * If the reference isn't aligned in the new type","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":11124,"byte_end":11176,"line_start":373,"line_end":373,"column_start":1,"column_end":53}},{"value":"/ * If the source type and target type aren't the same size.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":11177,"byte_end":11239,"line_start":374,"line_end":374,"column_start":1,"column_end":63}},{"value":"inline","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":11240,"byte_end":11249,"line_start":375,"line_end":375,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":283},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":11847,"byte_end":11859,"line_start":394,"line_end":394,"column_start":8,"column_end":20},"name":"try_cast_mut","qualname":"::try_cast_mut","value":"pub fn try_cast_mut<A: Pod, B: Pod>(&mut A) -> Result<&mut B, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&mut T` into `&mut U`.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":11745,"byte_end":11789,"line_start":390,"line_end":390,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":11790,"byte_end":11793,"line_start":391,"line_end":391,"column_start":1,"column_end":4}},{"value":"/ As [`try_cast_ref`], but `mut`.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":11794,"byte_end":11829,"line_start":392,"line_end":392,"column_start":1,"column_end":36}},{"value":"inline","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":11830,"byte_end":11839,"line_start":393,"line_end":393,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":286},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":13099,"byte_end":13113,"line_start":424,"line_end":424,"column_start":8,"column_end":22},"name":"try_cast_slice","qualname":"::try_cast_slice","value":"pub fn try_cast_slice<A: Pod, B: Pod>(&[A]) -> Result<&[B], PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&[A]` into `&[B]` (possibly with a change in length).","sig":null,"attributes":[{"value":"/ Try to convert `&[A]` into `&[B]` (possibly with a change in length).","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":12341,"byte_end":12414,"line_start":408,"line_end":408,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":12415,"byte_end":12418,"line_start":409,"line_end":409,"column_start":1,"column_end":4}},{"value":"/ * `input.as_ptr() as usize == output.as_ptr() as usize`","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":12419,"byte_end":12478,"line_start":410,"line_end":410,"column_start":1,"column_end":60}},{"value":"/ * `input.len() * size_of::<A>() == output.len() * size_of::<B>()`","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":12479,"byte_end":12548,"line_start":411,"line_end":411,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":12549,"byte_end":12552,"line_start":412,"line_end":412,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":12553,"byte_end":12567,"line_start":413,"line_end":413,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":12568,"byte_end":12571,"line_start":414,"line_end":414,"column_start":1,"column_end":4}},{"value":"/ * If the target type has a greater alignment requirement and the input slice","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":12572,"byte_end":12652,"line_start":415,"line_end":415,"column_start":1,"column_end":81}},{"value":"/   isn't aligned.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":12653,"byte_end":12673,"line_start":416,"line_end":416,"column_start":1,"column_end":21}},{"value":"/ * If the target element type is a different size from the current element","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":12674,"byte_end":12751,"line_start":417,"line_end":417,"column_start":1,"column_end":78}},{"value":"/   type, and the output slice wouldn't be a whole number of elements when","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":12752,"byte_end":12828,"line_start":418,"line_end":418,"column_start":1,"column_end":77}},{"value":"/   accounting for the size change (eg: 3 `u16` values is 1.5 `u32` values, so","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":12829,"byte_end":12909,"line_start":419,"line_end":419,"column_start":1,"column_end":81}},{"value":"/   that's a failure).","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":12910,"byte_end":12934,"line_start":420,"line_end":420,"column_start":1,"column_end":25}},{"value":"/ * Similarly, you can't convert between a [ZST](https://doc.rust-lang.org/nomicon/exotic-sizes.html#zero-sized-types-zsts)","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":12935,"byte_end":13060,"line_start":421,"line_end":421,"column_start":1,"column_end":126}},{"value":"/   and a non-ZST.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":13061,"byte_end":13081,"line_start":422,"line_end":422,"column_start":1,"column_end":21}},{"value":"inline","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":13082,"byte_end":13091,"line_start":423,"line_end":423,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":289},"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":14076,"byte_end":14094,"line_start":448,"line_end":448,"column_start":8,"column_end":26},"name":"try_cast_slice_mut","qualname":"::try_cast_slice_mut","value":"pub fn try_cast_slice_mut<A: Pod, B: Pod>(&mut [A])\n-> Result<&mut [B], PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in\n length).","sig":null,"attributes":[{"value":"/ Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":13930,"byte_end":14002,"line_start":443,"line_end":443,"column_start":1,"column_end":73}},{"value":"/ length).","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":14003,"byte_end":14015,"line_start":444,"line_end":444,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":14016,"byte_end":14019,"line_start":445,"line_end":445,"column_start":1,"column_end":4}},{"value":"/ As [`try_cast_slice`], but `&mut`.","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":14020,"byte_end":14058,"line_start":446,"line_end":446,"column_start":1,"column_end":39}},{"value":"inline","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":14059,"byte_end":14068,"line_start":447,"line_end":447,"column_start":1,"column_end":10}}]}],"impls":[{"id":16,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":24905,"byte_end":24913,"line_start":43,"line_end":43,"column_start":39,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":24946,"byte_end":24952,"line_start":45,"line_end":45,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":24992,"byte_end":24998,"line_start":46,"line_end":46,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":25039,"byte_end":25045,"line_start":47,"line_end":47,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":25086,"byte_end":25092,"line_start":48,"line_end":48,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":25133,"byte_end":25139,"line_start":49,"line_end":49,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":25181,"byte_end":25187,"line_start":50,"line_end":50,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":25230,"byte_end":25236,"line_start":51,"line_end":51,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":25276,"byte_end":25282,"line_start":52,"line_end":52,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":25323,"byte_end":25329,"line_start":53,"line_end":53,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":25370,"byte_end":25376,"line_start":54,"line_end":54,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":25417,"byte_end":25423,"line_start":55,"line_end":55,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":25465,"byte_end":25471,"line_start":56,"line_end":56,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":25596,"byte_end":25602,"line_start":60,"line_end":60,"column_start":29,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":25656,"byte_end":25667,"line_start":61,"line_end":61,"column_start":39,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":25699,"byte_end":25712,"line_start":62,"line_end":62,"column_start":26,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":25754,"byte_end":25766,"line_start":63,"line_end":63,"column_start":39,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":27743,"byte_end":27750,"line_start":140,"line_end":140,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":27818,"byte_end":27824,"line_start":142,"line_end":142,"column_start":34,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":27892,"byte_end":27899,"line_start":144,"line_end":144,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":27967,"byte_end":27974,"line_start":146,"line_end":146,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":28042,"byte_end":28048,"line_start":148,"line_end":148,"column_start":34,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":28116,"byte_end":28123,"line_start":150,"line_end":150,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":30289,"byte_end":30297,"line_start":46,"line_end":46,"column_start":29,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":30325,"byte_end":30331,"line_start":48,"line_end":48,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":30366,"byte_end":30372,"line_start":49,"line_end":49,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":30408,"byte_end":30414,"line_start":50,"line_end":50,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":30450,"byte_end":30456,"line_start":51,"line_end":51,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":30492,"byte_end":30498,"line_start":52,"line_end":52,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":30535,"byte_end":30541,"line_start":53,"line_end":53,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":30579,"byte_end":30585,"line_start":54,"line_end":54,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":30620,"byte_end":30626,"line_start":55,"line_end":55,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":30662,"byte_end":30668,"line_start":56,"line_end":56,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":30704,"byte_end":30710,"line_start":57,"line_end":57,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":30746,"byte_end":30752,"line_start":58,"line_end":58,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":30789,"byte_end":30795,"line_start":59,"line_end":59,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":31106,"byte_end":31117,"line_start":68,"line_end":68,"column_start":29,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":31144,"byte_end":31157,"line_start":69,"line_end":69,"column_start":21,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":31189,"byte_end":31201,"line_start":70,"line_end":70,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":32155,"byte_end":32162,"line_start":101,"line_end":101,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":32225,"byte_end":32231,"line_start":103,"line_end":103,"column_start":29,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":32294,"byte_end":32301,"line_start":105,"line_end":105,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":32364,"byte_end":32371,"line_start":107,"line_end":107,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":32434,"byte_end":32440,"line_start":109,"line_end":109,"column_start":29,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":32503,"byte_end":32510,"line_start":111,"line_end":111,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":54716,"byte_end":54724,"line_start":249,"line_end":249,"column_start":53,"column_end":61},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":7947,"byte_end":7959,"line_start":246,"line_end":246,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":255}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":2615,"byte_end":2625,"line_start":77,"line_end":77,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":18}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":23980,"byte_end":23985,"line_start":15,"line_end":15,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":3021},"to":{"krate":0,"index":72}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":24905,"byte_end":24913,"line_start":43,"line_end":43,"column_start":39,"column_end":47},"kind":{"Impl":{"id":16}},"from":{"krate":1,"index":24934},"to":{"krate":0,"index":72}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":24946,"byte_end":24952,"line_start":45,"line_end":45,"column_start":26,"column_end":32},"kind":{"Impl":{"id":17}},"from":{"krate":1,"index":43439},"to":{"krate":0,"index":72}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":24992,"byte_end":24998,"line_start":46,"line_end":46,"column_start":26,"column_end":32},"kind":{"Impl":{"id":18}},"from":{"krate":1,"index":43439},"to":{"krate":0,"index":72}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":25039,"byte_end":25045,"line_start":47,"line_end":47,"column_start":26,"column_end":32},"kind":{"Impl":{"id":19}},"from":{"krate":1,"index":43439},"to":{"krate":0,"index":72}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":25086,"byte_end":25092,"line_start":48,"line_end":48,"column_start":26,"column_end":32},"kind":{"Impl":{"id":20}},"from":{"krate":1,"index":43439},"to":{"krate":0,"index":72}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":25133,"byte_end":25139,"line_start":49,"line_end":49,"column_start":26,"column_end":32},"kind":{"Impl":{"id":21}},"from":{"krate":1,"index":43439},"to":{"krate":0,"index":72}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":25181,"byte_end":25187,"line_start":50,"line_end":50,"column_start":26,"column_end":32},"kind":{"Impl":{"id":22}},"from":{"krate":1,"index":43439},"to":{"krate":0,"index":72}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":25230,"byte_end":25236,"line_start":51,"line_end":51,"column_start":26,"column_end":32},"kind":{"Impl":{"id":23}},"from":{"krate":1,"index":43439},"to":{"krate":0,"index":72}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":25276,"byte_end":25282,"line_start":52,"line_end":52,"column_start":26,"column_end":32},"kind":{"Impl":{"id":24}},"from":{"krate":1,"index":43439},"to":{"krate":0,"index":72}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":25323,"byte_end":25329,"line_start":53,"line_end":53,"column_start":26,"column_end":32},"kind":{"Impl":{"id":25}},"from":{"krate":1,"index":43439},"to":{"krate":0,"index":72}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":25370,"byte_end":25376,"line_start":54,"line_end":54,"column_start":26,"column_end":32},"kind":{"Impl":{"id":26}},"from":{"krate":1,"index":43439},"to":{"krate":0,"index":72}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":25417,"byte_end":25423,"line_start":55,"line_end":55,"column_start":26,"column_end":32},"kind":{"Impl":{"id":27}},"from":{"krate":1,"index":43439},"to":{"krate":0,"index":72}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":25465,"byte_end":25471,"line_start":56,"line_end":56,"column_start":26,"column_end":32},"kind":{"Impl":{"id":28}},"from":{"krate":1,"index":43439},"to":{"krate":0,"index":72}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":25596,"byte_end":25602,"line_start":60,"line_end":60,"column_start":29,"column_end":35},"kind":{"Impl":{"id":29}},"from":{"krate":1,"index":43439},"to":{"krate":0,"index":72}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":25656,"byte_end":25667,"line_start":61,"line_end":61,"column_start":39,"column_end":50},"kind":{"Impl":{"id":30}},"from":{"krate":1,"index":3034},"to":{"krate":0,"index":72}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":25699,"byte_end":25712,"line_start":62,"line_end":62,"column_start":26,"column_end":39},"kind":{"Impl":{"id":31}},"from":{"krate":1,"index":34983},"to":{"krate":0,"index":72}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":25754,"byte_end":25766,"line_start":63,"line_end":63,"column_start":39,"column_end":51},"kind":{"Impl":{"id":32}},"from":{"krate":1,"index":28797},"to":{"krate":0,"index":72}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":27743,"byte_end":27750,"line_start":140,"line_end":140,"column_start":34,"column_end":41},"kind":{"Impl":{"id":33}},"from":{"krate":1,"index":49279},"to":{"krate":0,"index":72}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":27818,"byte_end":27824,"line_start":142,"line_end":142,"column_start":34,"column_end":40},"kind":{"Impl":{"id":34}},"from":{"krate":1,"index":49288},"to":{"krate":0,"index":72}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":27892,"byte_end":27899,"line_start":144,"line_end":144,"column_start":34,"column_end":41},"kind":{"Impl":{"id":35}},"from":{"krate":1,"index":49299},"to":{"krate":0,"index":72}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":27967,"byte_end":27974,"line_start":146,"line_end":146,"column_start":34,"column_end":41},"kind":{"Impl":{"id":36}},"from":{"krate":1,"index":49308},"to":{"krate":0,"index":72}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":28042,"byte_end":28048,"line_start":148,"line_end":148,"column_start":34,"column_end":40},"kind":{"Impl":{"id":37}},"from":{"krate":1,"index":49319},"to":{"krate":0,"index":72}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/zeroable.rs","byte_start":28116,"byte_end":28123,"line_start":150,"line_end":150,"column_start":34,"column_end":41},"kind":{"Impl":{"id":38}},"from":{"krate":1,"index":49334},"to":{"krate":0,"index":72}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":29823,"byte_end":29831,"line_start":29,"line_end":29,"column_start":23,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":72},"to":{"krate":0,"index":169}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":29834,"byte_end":29838,"line_start":29,"line_end":29,"column_start":34,"column_end":38},"kind":"SuperTrait","from":{"krate":1,"index":3026},"to":{"krate":0,"index":169}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":30289,"byte_end":30297,"line_start":46,"line_end":46,"column_start":29,"column_end":37},"kind":{"Impl":{"id":53}},"from":{"krate":1,"index":24934},"to":{"krate":0,"index":169}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":30325,"byte_end":30331,"line_start":48,"line_end":48,"column_start":21,"column_end":27},"kind":{"Impl":{"id":54}},"from":{"krate":1,"index":43439},"to":{"krate":0,"index":169}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":30366,"byte_end":30372,"line_start":49,"line_end":49,"column_start":21,"column_end":27},"kind":{"Impl":{"id":55}},"from":{"krate":1,"index":43439},"to":{"krate":0,"index":169}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":30408,"byte_end":30414,"line_start":50,"line_end":50,"column_start":21,"column_end":27},"kind":{"Impl":{"id":56}},"from":{"krate":1,"index":43439},"to":{"krate":0,"index":169}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":30450,"byte_end":30456,"line_start":51,"line_end":51,"column_start":21,"column_end":27},"kind":{"Impl":{"id":57}},"from":{"krate":1,"index":43439},"to":{"krate":0,"index":169}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":30492,"byte_end":30498,"line_start":52,"line_end":52,"column_start":21,"column_end":27},"kind":{"Impl":{"id":58}},"from":{"krate":1,"index":43439},"to":{"krate":0,"index":169}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":30535,"byte_end":30541,"line_start":53,"line_end":53,"column_start":21,"column_end":27},"kind":{"Impl":{"id":59}},"from":{"krate":1,"index":43439},"to":{"krate":0,"index":169}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":30579,"byte_end":30585,"line_start":54,"line_end":54,"column_start":21,"column_end":27},"kind":{"Impl":{"id":60}},"from":{"krate":1,"index":43439},"to":{"krate":0,"index":169}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":30620,"byte_end":30626,"line_start":55,"line_end":55,"column_start":21,"column_end":27},"kind":{"Impl":{"id":61}},"from":{"krate":1,"index":43439},"to":{"krate":0,"index":169}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":30662,"byte_end":30668,"line_start":56,"line_end":56,"column_start":21,"column_end":27},"kind":{"Impl":{"id":62}},"from":{"krate":1,"index":43439},"to":{"krate":0,"index":169}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":30704,"byte_end":30710,"line_start":57,"line_end":57,"column_start":21,"column_end":27},"kind":{"Impl":{"id":63}},"from":{"krate":1,"index":43439},"to":{"krate":0,"index":169}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":30746,"byte_end":30752,"line_start":58,"line_end":58,"column_start":21,"column_end":27},"kind":{"Impl":{"id":64}},"from":{"krate":1,"index":43439},"to":{"krate":0,"index":169}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":30789,"byte_end":30795,"line_start":59,"line_end":59,"column_start":21,"column_end":27},"kind":{"Impl":{"id":65}},"from":{"krate":1,"index":43439},"to":{"krate":0,"index":169}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":31106,"byte_end":31117,"line_start":68,"line_end":68,"column_start":29,"column_end":40},"kind":{"Impl":{"id":66}},"from":{"krate":1,"index":3034},"to":{"krate":0,"index":169}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":31144,"byte_end":31157,"line_start":69,"line_end":69,"column_start":21,"column_end":34},"kind":{"Impl":{"id":67}},"from":{"krate":1,"index":34983},"to":{"krate":0,"index":169}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":31189,"byte_end":31201,"line_start":70,"line_end":70,"column_start":29,"column_end":41},"kind":{"Impl":{"id":68}},"from":{"krate":1,"index":28797},"to":{"krate":0,"index":169}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":32155,"byte_end":32162,"line_start":101,"line_end":101,"column_start":29,"column_end":36},"kind":{"Impl":{"id":69}},"from":{"krate":1,"index":49279},"to":{"krate":0,"index":169}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":32225,"byte_end":32231,"line_start":103,"line_end":103,"column_start":29,"column_end":35},"kind":{"Impl":{"id":70}},"from":{"krate":1,"index":49288},"to":{"krate":0,"index":169}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":32294,"byte_end":32301,"line_start":105,"line_end":105,"column_start":29,"column_end":36},"kind":{"Impl":{"id":71}},"from":{"krate":1,"index":49299},"to":{"krate":0,"index":169}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":32364,"byte_end":32371,"line_start":107,"line_end":107,"column_start":29,"column_end":36},"kind":{"Impl":{"id":72}},"from":{"krate":1,"index":49308},"to":{"krate":0,"index":169}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":32434,"byte_end":32440,"line_start":109,"line_end":109,"column_start":29,"column_end":35},"kind":{"Impl":{"id":73}},"from":{"krate":1,"index":49319},"to":{"krate":0,"index":169}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/pod.rs","byte_start":32503,"byte_end":32510,"line_start":111,"line_end":111,"column_start":29,"column_end":36},"kind":{"Impl":{"id":74}},"from":{"krate":1,"index":49334},"to":{"krate":0,"index":169}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/contiguous.rs","byte_start":35840,"byte_end":35844,"line_start":78,"line_end":78,"column_start":30,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":3026},"to":{"krate":0,"index":213}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/transparent.rs","byte_start":54716,"byte_end":54724,"line_start":249,"line_end":249,"column_start":53,"column_end":61},"kind":{"Impl":{"id":94}},"from":{"krate":1,"index":24934},"to":{"krate":0,"index":226}},{"span":{"file_name":"/Users/katianawieser/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.7.3/src/lib.rs","byte_start":7947,"byte_end":7959,"line_start":246,"line_end":246,"column_start":29,"column_end":41},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":622},"to":{"krate":1,"index":9403}}]}