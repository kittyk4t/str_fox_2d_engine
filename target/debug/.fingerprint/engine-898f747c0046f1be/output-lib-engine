{"message":"`match` arm body without braces","code":null,"level":"error","spans":[{"file_name":"engine/src/animation.rs","byte_start":10268,"byte_end":10293,"line_start":290,"line_end":290,"column_start":43,"column_end":68,"is_primary":true,"text":[{"text":"                Some(key, anim_entity) => anim_entity.pos = key.pos;","highlight_start":43,"highlight_end":68}],"label":"this statement is not surrounded by a body","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/animation.rs","byte_start":10265,"byte_end":10267,"line_start":290,"line_end":290,"column_start":40,"column_end":42,"is_primary":false,"text":[{"text":"                Some(key, anim_entity) => anim_entity.pos = key.pos;","highlight_start":40,"highlight_end":42}],"label":"while parsing the `match` arm starting here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use a comma to end a `match` arm expression","code":null,"level":"help","spans":[{"file_name":"engine/src/animation.rs","byte_start":10293,"byte_end":10294,"line_start":290,"line_end":290,"column_start":68,"column_end":69,"is_primary":true,"text":[{"text":"                Some(key, anim_entity) => anim_entity.pos = key.pos;","highlight_start":68,"highlight_end":69}],"label":null,"suggested_replacement":",","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: `match` arm body without braces\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mengine/src/animation.rs:290:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m290\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                Some(key, anim_entity) => anim_entity.pos = key.pos;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: use a comma to end a `match` arm expression: `,`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthis statement is not surrounded by a body\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mwhile parsing the `match` arm starting here\u001b[0m\n\n"}
{"message":"expected one of `->`, `;`, `where`, or `{`, found keyword `fn`","code":null,"level":"error","spans":[{"file_name":"engine/src/animation.rs","byte_start":11127,"byte_end":11127,"line_start":315,"line_end":315,"column_start":23,"column_end":23,"is_primary":false,"text":[{"text":"    fn remove_entity()","highlight_start":23,"highlight_end":23}],"label":"expected one of `->`, `;`, `where`, or `{`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/animation.rs","byte_start":11177,"byte_end":11179,"line_start":318,"line_end":318,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    fn incr_frame(&mut self, entities: Vec<Entity>) -> (){","highlight_start":5,"highlight_end":7}],"label":"unexpected token","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/animation.rs","byte_start":8499,"byte_end":8500,"line_start":243,"line_end":243,"column_start":15,"column_end":16,"is_primary":false,"text":[{"text":"impl DrawState{","highlight_start":15,"highlight_end":16}],"label":"while parsing this item list starting here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/animation.rs","byte_start":11835,"byte_end":11836,"line_start":335,"line_end":335,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"}","highlight_start":1,"highlight_end":2}],"label":"the item list ends here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: expected one of `->`, `;`, `where`, or `{`, found keyword `fn`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mengine/src/animation.rs:318:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m243\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl DrawState{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mwhile parsing this item list starting here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m315\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn remove_entity()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected one of `->`, `;`, `where`, or `{`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m318\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn incr_frame(&mut self, entities: Vec<Entity>) -> (){\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munexpected token\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m335\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthe item list ends here\u001b[0m\n\n"}
{"message":"cannot find value `anim_entity` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"engine/src/animation.rs","byte_start":10992,"byte_end":11003,"line_start":311,"line_end":311,"column_start":17,"column_end":28,"is_primary":true,"text":[{"text":"                anim_entity.trigger_animation(anim_id, entity.texture.is_visible, self.cur_frame);","highlight_start":17,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a local variable with a similar name exists","code":null,"level":"help","spans":[{"file_name":"engine/src/animation.rs","byte_start":10992,"byte_end":11003,"line_start":311,"line_end":311,"column_start":17,"column_end":28,"is_primary":true,"text":[{"text":"                anim_entity.trigger_animation(anim_id, entity.texture.is_visible, self.cur_frame);","highlight_start":17,"highlight_end":28}],"label":null,"suggested_replacement":"anim_enity","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find value `anim_entity` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mengine/src/animation.rs:311:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m311\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                anim_entity.trigger_animation(anim_id, entity.texture.is_visible, self.cur_frame);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a local variable with a similar name exists: `anim_enity`\u001b[0m\n\n"}
{"message":"unused import: `serde::Deserialize`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"engine/src/entity.rs","byte_start":1339,"byte_end":1357,"line_start":74,"line_end":74,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"use serde::Deserialize;","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"engine/src/entity.rs","byte_start":1335,"byte_end":1358,"line_start":74,"line_end":74,"column_start":1,"column_end":24,"is_primary":true,"text":[{"text":"use serde::Deserialize;","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `serde::Deserialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mengine/src/entity.rs:74:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse serde::Deserialize;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused import: `serde_json`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"engine/src/entity.rs","byte_start":1363,"byte_end":1373,"line_start":75,"line_end":75,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"use serde_json;","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"engine/src/entity.rs","byte_start":1359,"byte_end":1374,"line_start":75,"line_end":75,"column_start":1,"column_end":16,"is_primary":true,"text":[{"text":"use serde_json;","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `serde_json`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mengine/src/entity.rs:75:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse serde_json;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `std::sync::Arc`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"engine/src/animation.rs","byte_start":4,"byte_end":18,"line_start":1,"line_end":1,"column_start":5,"column_end":19,"is_primary":true,"text":[{"text":"use std::sync::Arc;","highlight_start":5,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"engine/src/animation.rs","byte_start":0,"byte_end":19,"line_start":1,"line_end":1,"column_start":1,"column_end":20,"is_primary":true,"text":[{"text":"use std::sync::Arc;","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `std::sync::Arc`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mengine/src/animation.rs:1:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse std::sync::Arc;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `serde::Deserialize`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"engine/src/animation.rs","byte_start":35,"byte_end":53,"line_start":3,"line_end":3,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"use serde::Deserialize;","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"engine/src/animation.rs","byte_start":31,"byte_end":54,"line_start":3,"line_end":3,"column_start":1,"column_end":24,"is_primary":true,"text":[{"text":"use serde::Deserialize;","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `serde::Deserialize`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mengine/src/animation.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse serde::Deserialize;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `serde_json`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"engine/src/animation.rs","byte_start":59,"byte_end":69,"line_start":4,"line_end":4,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"use serde_json;","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"engine/src/animation.rs","byte_start":55,"byte_end":70,"line_start":4,"line_end":4,"column_start":1,"column_end":16,"is_primary":true,"text":[{"text":"use serde_json;","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `serde_json`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mengine/src/animation.rs:4:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse serde_json;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `std::fs`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"engine/src/animation.rs","byte_start":75,"byte_end":82,"line_start":5,"line_end":5,"column_start":5,"column_end":12,"is_primary":true,"text":[{"text":"use std::fs;","highlight_start":5,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"engine/src/animation.rs","byte_start":71,"byte_end":83,"line_start":5,"line_end":5,"column_start":1,"column_end":13,"is_primary":true,"text":[{"text":"use std::fs;","highlight_start":1,"highlight_end":13}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `std::fs`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mengine/src/animation.rs:5:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse std::fs;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\n"}
{"message":"unused imports: `Hash`, `Hasher`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"engine/src/animation.rs","byte_start":100,"byte_end":104,"line_start":6,"line_end":6,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"use std::hash::{Hash, Hasher};","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/animation.rs","byte_start":106,"byte_end":112,"line_start":6,"line_end":6,"column_start":23,"column_end":29,"is_primary":true,"text":[{"text":"use std::hash::{Hash, Hasher};","highlight_start":23,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"engine/src/animation.rs","byte_start":84,"byte_end":114,"line_start":6,"line_end":6,"column_start":1,"column_end":31,"is_primary":true,"text":[{"text":"use std::hash::{Hash, Hasher};","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `Hash`, `Hasher`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mengine/src/animation.rs:6:17\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse std::hash::{Hash, Hasher};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `super::engine_core::*`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"engine/src/animation.rs","byte_start":216,"byte_end":237,"line_start":12,"line_end":12,"column_start":5,"column_end":26,"is_primary":true,"text":[{"text":"use super::engine_core::*;","highlight_start":5,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"engine/src/animation.rs","byte_start":212,"byte_end":238,"line_start":12,"line_end":12,"column_start":1,"column_end":27,"is_primary":true,"text":[{"text":"use super::engine_core::*;","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `super::engine_core::*`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mengine/src/animation.rs:12:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse super::engine_core::*;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"struct `AnimationEntity` has no field named `id`","code":{"code":"E0560","explanation":"An unknown field was specified into a structure.\n\nErroneous code example:\n\n```compile_fail,E0560\nstruct Simba {\n    mother: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 };\n// error: structure `Simba` has no field named `father`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nstruct Simba {\n    mother: u32,\n    father: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 }; // ok!\n```\n"},"level":"error","spans":[{"file_name":"engine/src/animation.rs","byte_start":7202,"byte_end":7204,"line_start":205,"line_end":205,"column_start":37,"column_end":39,"is_primary":true,"text":[{"text":"    AnimationEntity{AnimationEntity{id, sprite, states, pos, size, animation_layer} }","highlight_start":37,"highlight_end":39}],"label":"`AnimationEntity` does not have this field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"available fields are: `sprite`, `states`, `pos`, `size`, `animation_layer`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0560]\u001b[0m\u001b[0m\u001b[1m: struct `AnimationEntity` has no field named `id`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mengine/src/animation.rs:205:37\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m205\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    AnimationEntity{AnimationEntity{id, sprite, states, pos, size, animation_layer} }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`AnimationEntity` does not have this field\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: available fields are: `sprite`, `states`, `pos`, `size`, `animation_layer`\u001b[0m\n\n"}
{"message":"this function takes 2 arguments but 1 argument was supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"engine/src/animation.rs","byte_start":8837,"byte_end":8845,"line_start":250,"line_end":250,"column_start":55,"column_end":63,"is_primary":false,"text":[{"text":"        anim_entities: DrawState::init_anim_enitities(entities)}","highlight_start":55,"highlight_end":63}],"label":"supplied 1 argument","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/animation.rs","byte_start":8806,"byte_end":8836,"line_start":250,"line_end":250,"column_start":24,"column_end":54,"is_primary":true,"text":[{"text":"        anim_entities: DrawState::init_anim_enitities(entities)}","highlight_start":24,"highlight_end":54}],"label":"expected 2 arguments","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"associated function defined here","code":null,"level":"note","spans":[{"file_name":"engine/src/animation.rs","byte_start":9207,"byte_end":9216,"line_start":263,"line_end":263,"column_start":28,"column_end":37,"is_primary":false,"text":[{"text":"    fn init_anim_enitities(&mut self, entities: Vec<Entity>) -> HashMap<Entity, AnimationEntity>{","highlight_start":28,"highlight_end":37}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/animation.rs","byte_start":9218,"byte_end":9239,"line_start":263,"line_end":263,"column_start":39,"column_end":60,"is_primary":false,"text":[{"text":"    fn init_anim_enitities(&mut self, entities: Vec<Entity>) -> HashMap<Entity, AnimationEntity>{","highlight_start":39,"highlight_end":60}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/animation.rs","byte_start":9187,"byte_end":9206,"line_start":263,"line_end":263,"column_start":8,"column_end":27,"is_primary":true,"text":[{"text":"    fn init_anim_enitities(&mut self, entities: Vec<Entity>) -> HashMap<Entity, AnimationEntity>{","highlight_start":8,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this function takes 2 arguments but 1 argument was supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mengine/src/animation.rs:250:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m250\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        anim_entities: DrawState::init_anim_enitities(entities)}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msupplied 1 argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected 2 arguments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: associated function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mengine/src/animation.rs:263:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m263\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn init_anim_enitities(&mut self, entities: Vec<Entity>) -> HashMap<Entity, AnimationEntity>{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\n\n"}
{"message":"no field `entities` on type `&mut DrawState`","code":{"code":"E0609","explanation":"Attempted to access a non-existent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"engine/src/animation.rs","byte_start":9343,"byte_end":9351,"line_start":265,"line_end":265,"column_start":28,"column_end":36,"is_primary":true,"text":[{"text":"        for entity in self.entities.iter()","highlight_start":28,"highlight_end":36}],"label":"unknown field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"available fields are: `tb_render`, `sprite_sheet`, `cur_frame`, `anim_entities`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `entities` on type `&mut DrawState`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mengine/src/animation.rs:265:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m265\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        for entity in self.entities.iter()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munknown field\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: available fields are: `tb_render`, `sprite_sheet`, `cur_frame`, `anim_entities`\u001b[0m\n\n"}
{"message":"this function takes 6 arguments but 5 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"engine/src/animation.rs","byte_start":9437,"byte_end":9492,"line_start":268,"line_end":268,"column_start":17,"column_end":72,"is_primary":false,"text":[{"text":"                self.sprite_sheet.sprites[entity.texture.index].clone(),","highlight_start":17,"highlight_end":72}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/animation.rs","byte_start":9510,"byte_end":9526,"line_start":269,"line_end":269,"column_start":17,"column_end":33,"is_primary":false,"text":[{"text":"                AnimQueue::new(),","highlight_start":17,"highlight_end":33}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/animation.rs","byte_start":9544,"byte_end":9554,"line_start":270,"line_end":270,"column_start":17,"column_end":27,"is_primary":false,"text":[{"text":"                entity.pos,","highlight_start":17,"highlight_end":27}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/animation.rs","byte_start":9572,"byte_end":9583,"line_start":271,"line_end":271,"column_start":17,"column_end":28,"is_primary":false,"text":[{"text":"                entity.size,","highlight_start":17,"highlight_end":28}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/animation.rs","byte_start":9601,"byte_end":9631,"line_start":272,"line_end":272,"column_start":17,"column_end":47,"is_primary":false,"text":[{"text":"                entity.texture.animation_layer","highlight_start":17,"highlight_end":47}],"label":"supplied 5 arguments","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/animation.rs","byte_start":9399,"byte_end":9419,"line_start":267,"line_end":267,"column_start":31,"column_end":51,"is_primary":true,"text":[{"text":"            map.insert(entity,AnimationEntity::new(","highlight_start":31,"highlight_end":51}],"label":"expected 6 arguments","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"associated function defined here","code":null,"level":"note","spans":[{"file_name":"engine/src/animation.rs","byte_start":7068,"byte_end":7077,"line_start":204,"line_end":204,"column_start":17,"column_end":26,"is_primary":false,"text":[{"text":"    pub fn new( id: usize,sprite: Sprite, states: AnimQueue, pos: Vec2, size: Vec2i, animation_layer: usize,) -> ","highlight_start":17,"highlight_end":26}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/animation.rs","byte_start":7078,"byte_end":7092,"line_start":204,"line_end":204,"column_start":27,"column_end":41,"is_primary":false,"text":[{"text":"    pub fn new( id: usize,sprite: Sprite, states: AnimQueue, pos: Vec2, size: Vec2i, animation_layer: usize,) -> ","highlight_start":27,"highlight_end":41}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/animation.rs","byte_start":7094,"byte_end":7111,"line_start":204,"line_end":204,"column_start":43,"column_end":60,"is_primary":false,"text":[{"text":"    pub fn new( id: usize,sprite: Sprite, states: AnimQueue, pos: Vec2, size: Vec2i, animation_layer: usize,) -> ","highlight_start":43,"highlight_end":60}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/animation.rs","byte_start":7113,"byte_end":7122,"line_start":204,"line_end":204,"column_start":62,"column_end":71,"is_primary":false,"text":[{"text":"    pub fn new( id: usize,sprite: Sprite, states: AnimQueue, pos: Vec2, size: Vec2i, animation_layer: usize,) -> ","highlight_start":62,"highlight_end":71}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/animation.rs","byte_start":7124,"byte_end":7135,"line_start":204,"line_end":204,"column_start":73,"column_end":84,"is_primary":false,"text":[{"text":"    pub fn new( id: usize,sprite: Sprite, states: AnimQueue, pos: Vec2, size: Vec2i, animation_layer: usize,) -> ","highlight_start":73,"highlight_end":84}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/animation.rs","byte_start":7137,"byte_end":7159,"line_start":204,"line_end":204,"column_start":86,"column_end":108,"is_primary":false,"text":[{"text":"    pub fn new( id: usize,sprite: Sprite, states: AnimQueue, pos: Vec2, size: Vec2i, animation_layer: usize,) -> ","highlight_start":86,"highlight_end":108}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/animation.rs","byte_start":7063,"byte_end":7066,"line_start":204,"line_end":204,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"    pub fn new( id: usize,sprite: Sprite, states: AnimQueue, pos: Vec2, size: Vec2i, animation_layer: usize,) -> ","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this function takes 6 arguments but 5 arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mengine/src/animation.rs:267:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m267\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            map.insert(entity,AnimationEntity::new(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected 6 arguments\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m268\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                self.sprite_sheet.sprites[entity.texture.index].clone(),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m269\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                AnimQueue::new(),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m270\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                entity.pos,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m271\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                entity.size,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                entity.texture.animation_layer\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msupplied 5 arguments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: associated function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mengine/src/animation.rs:204:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m204\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub fn new( id: usize,sprite: Sprite, states: AnimQueue, pos: Vec2, size: Vec2i, animation_layer: usize,) -> \u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"engine/src/animation.rs","byte_start":9324,"byte_end":9657,"line_start":265,"line_end":274,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        for entity in self.entities.iter()","highlight_start":9,"highlight_end":43},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            map.insert(entity,AnimationEntity::new(","highlight_start":1,"highlight_end":52},{"text":"                self.sprite_sheet.sprites[entity.texture.index].clone(),","highlight_start":1,"highlight_end":73},{"text":"                AnimQueue::new(),","highlight_start":1,"highlight_end":34},{"text":"                entity.pos,","highlight_start":1,"highlight_end":28},{"text":"                entity.size,","highlight_start":1,"highlight_end":29},{"text":"                entity.texture.animation_layer","highlight_start":1,"highlight_end":47},{"text":"            ));","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":"expected struct `HashMap`, found `()`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"engine/src/animation.rs","byte_start":9324,"byte_end":9657,"line_start":265,"line_end":274,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        for entity in self.entities.iter()","highlight_start":9,"highlight_end":43},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            map.insert(entity,AnimationEntity::new(","highlight_start":1,"highlight_end":52},{"text":"                self.sprite_sheet.sprites[entity.texture.index].clone(),","highlight_start":1,"highlight_end":73},{"text":"                AnimQueue::new(),","highlight_start":1,"highlight_end":34},{"text":"                entity.pos,","highlight_start":1,"highlight_end":28},{"text":"                entity.size,","highlight_start":1,"highlight_end":29},{"text":"                entity.texture.animation_layer","highlight_start":1,"highlight_end":47},{"text":"            ));","highlight_start":1,"highlight_end":16},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `for` loop","def_site_span":{"file_name":"engine/src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"engine/src/animation.rs","byte_start":9244,"byte_end":9276,"line_start":263,"line_end":263,"column_start":65,"column_end":97,"is_primary":false,"text":[{"text":"    fn init_anim_enitities(&mut self, entities: Vec<Entity>) -> HashMap<Entity, AnimationEntity>{","highlight_start":65,"highlight_end":97}],"label":"expected `HashMap<entity::Entity, AnimationEntity>` because of return type","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected struct `HashMap<entity::Entity, AnimationEntity>`\nfound unit type `()`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mengine/src/animation.rs:265:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m263\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m    fn init_anim_enitities(&mut self, entities: Vec<Entity>) -> HashMap<Entity, AnimationEntity>{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected `HashMap<entity::Entity, AnimationEntity>` because of return type\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m264\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        let mut map = HashMap::new();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m265\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        for entity in self.entities.iter()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m266\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m267\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            map.insert(entity,AnimationEntity::new(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m268\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                self.sprite_sheet.sprites[entity.texture.index].clone(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            ));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m274\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `HashMap`, found `()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1mHashMap<entity::Entity, AnimationEntity>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m            found unit type `\u001b[0m\u001b[0m\u001b[1m()\u001b[0m\u001b[0m`\u001b[0m\n\n"}
{"message":"no field `entities` on type `&mut DrawState`","code":{"code":"E0609","explanation":"Attempted to access a non-existent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"engine/src/animation.rs","byte_start":9806,"byte_end":9814,"line_start":279,"line_end":279,"column_start":28,"column_end":36,"is_primary":true,"text":[{"text":"        for entity in self.entities.iter(){","highlight_start":28,"highlight_end":36}],"label":"unknown field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"available fields are: `tb_render`, `sprite_sheet`, `cur_frame`, `anim_entities`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `entities` on type `&mut DrawState`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mengine/src/animation.rs:279:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m279\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        for entity in self.entities.iter(){\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munknown field\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: available fields are: `tb_render`, `sprite_sheet`, `cur_frame`, `anim_entities`\u001b[0m\n\n"}
{"message":"the method `get_mut` exists for struct `HashMap<entity::Entity, AnimationEntity>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"engine/src/animation.rs","byte_start":9860,"byte_end":9867,"line_start":280,"line_end":280,"column_start":38,"column_end":45,"is_primary":true,"text":[{"text":"            match self.anim_entities.get_mut(entity){","highlight_start":38,"highlight_end":45}],"label":"method cannot be called on `HashMap<entity::Entity, AnimationEntity>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/entity.rs","byte_start":2151,"byte_end":2168,"line_start":120,"line_end":120,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"pub struct Entity {","highlight_start":1,"highlight_end":18}],"label":"doesn't satisfy `entity::Entity: Eq`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`entity::Entity: Eq`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider annotating `entity::Entity` with `#[derive(Eq)]`","code":null,"level":"help","spans":[{"file_name":"engine/src/entity.rs","byte_start":2151,"byte_end":2151,"line_start":120,"line_end":120,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"pub struct Entity {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"#[derive(Eq)]\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `get_mut` exists for struct `HashMap<entity::Entity, AnimationEntity>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mengine/src/animation.rs:280:38\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m280\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            match self.anim_entities.get_mut(entity){\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `HashMap<entity::Entity, AnimationEntity>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mengine/src/entity.rs:120:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct Entity {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `entity::Entity: Eq`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `entity::Entity: Eq`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider annotating `entity::Entity` with `#[derive(Eq)]`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[38;5;10m#[derive(Eq)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"this pattern has 2 fields, but the corresponding tuple variant has 1 field","code":{"code":"E0023","explanation":"A pattern attempted to extract an incorrect number of fields from a variant.\n\nErroneous code example:\n\n```compile_fail,E0023\nenum Fruit {\n    Apple(String, String),\n    Pear(u32),\n}\n\nlet x = Fruit::Apple(String::new(), String::new());\n\nmatch x {\n    Fruit::Apple(a) => {}, // error!\n    _ => {}\n}\n```\n\nA pattern used to match against an enum variant must provide a sub-pattern for\neach field of the enum variant.\n\nHere the `Apple` variant has two fields, and should be matched against like so:\n\n```\nenum Fruit {\n    Apple(String, String),\n    Pear(u32),\n}\n\nlet x = Fruit::Apple(String::new(), String::new());\n\n// Correct.\nmatch x {\n    Fruit::Apple(a, b) => {},\n    _ => {}\n}\n```\n\nMatching with the wrong number of fields has no sensible interpretation:\n\n```compile_fail,E0023\nenum Fruit {\n    Apple(String, String),\n    Pear(u32),\n}\n\nlet x = Fruit::Apple(String::new(), String::new());\n\n// Incorrect.\nmatch x {\n    Fruit::Apple(a) => {},\n    Fruit::Apple(a, b, c) => {},\n}\n```\n\nCheck how many fields the enum was declared with and ensure that your pattern\nuses the same number.\n"},"level":"error","spans":[{"file_name":"engine/src/animation.rs","byte_start":10252,"byte_end":10263,"line_start":290,"line_end":290,"column_start":27,"column_end":38,"is_primary":true,"text":[{"text":"                Some(key, anim_entity) => anim_entity.pos = key.pos;","highlight_start":27,"highlight_end":38}],"label":"expected 1 field, found 2","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/katianawieser/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/core/src/option.rs","byte_start":19625,"byte_end":19626,"line_start":522,"line_end":522,"column_start":56,"column_end":57,"is_primary":false,"text":[{"text":"    Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),","highlight_start":56,"highlight_end":57}],"label":"tuple variant has 1 field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/animation.rs","byte_start":10247,"byte_end":10250,"line_start":290,"line_end":290,"column_start":22,"column_end":25,"is_primary":true,"text":[{"text":"                Some(key, anim_entity) => anim_entity.pos = key.pos;","highlight_start":22,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0023]\u001b[0m\u001b[0m\u001b[1m: this pattern has 2 fields, but the corresponding tuple variant has 1 field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mengine/src/animation.rs:290:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m290\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                Some(key, anim_entity) => anim_entity.pos = key.pos;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected 1 field, found 2\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/katianawieser/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/core/src/option.rs:522:56\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m522\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mtuple variant has 1 field\u001b[0m\n\n"}
{"message":"the method `insert` exists for struct `HashMap<entity::Entity, AnimationEntity>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"engine/src/animation.rs","byte_start":9942,"byte_end":9948,"line_start":282,"line_end":282,"column_start":40,"column_end":46,"is_primary":true,"text":[{"text":"                    self.anim_entities.insert(entity, AnimationEntity::new(","highlight_start":40,"highlight_end":46}],"label":"method cannot be called on `HashMap<entity::Entity, AnimationEntity>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/entity.rs","byte_start":2151,"byte_end":2168,"line_start":120,"line_end":120,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"pub struct Entity {","highlight_start":1,"highlight_end":18}],"label":"doesn't satisfy `entity::Entity: Eq`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`entity::Entity: Eq`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider annotating `entity::Entity` with `#[derive(Eq)]`","code":null,"level":"help","spans":[{"file_name":"engine/src/entity.rs","byte_start":2151,"byte_end":2151,"line_start":120,"line_end":120,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"pub struct Entity {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"#[derive(Eq)]\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `insert` exists for struct `HashMap<entity::Entity, AnimationEntity>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mengine/src/animation.rs:282:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m282\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    self.anim_entities.insert(entity, AnimationEntity::new(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `HashMap<entity::Entity, AnimationEntity>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mengine/src/entity.rs:120:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct Entity {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `entity::Entity: Eq`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `entity::Entity: Eq`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider annotating `entity::Entity` with `#[derive(Eq)]`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[38;5;10m#[derive(Eq)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"this function takes 6 arguments but 5 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"engine/src/animation.rs","byte_start":9995,"byte_end":10050,"line_start":283,"line_end":283,"column_start":17,"column_end":72,"is_primary":false,"text":[{"text":"                self.sprite_sheet.sprites[entity.texture.index].clone(),","highlight_start":17,"highlight_end":72}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/animation.rs","byte_start":10068,"byte_end":10084,"line_start":284,"line_end":284,"column_start":17,"column_end":33,"is_primary":false,"text":[{"text":"                AnimQueue::new(),","highlight_start":17,"highlight_end":33}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/animation.rs","byte_start":10102,"byte_end":10112,"line_start":285,"line_end":285,"column_start":17,"column_end":27,"is_primary":false,"text":[{"text":"                entity.pos,","highlight_start":17,"highlight_end":27}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/animation.rs","byte_start":10130,"byte_end":10141,"line_start":286,"line_end":286,"column_start":17,"column_end":28,"is_primary":false,"text":[{"text":"                entity.size,","highlight_start":17,"highlight_end":28}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/animation.rs","byte_start":10159,"byte_end":10189,"line_start":287,"line_end":287,"column_start":17,"column_end":47,"is_primary":false,"text":[{"text":"                entity.texture.animation_layer","highlight_start":17,"highlight_end":47}],"label":"supplied 5 arguments","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/animation.rs","byte_start":9957,"byte_end":9977,"line_start":282,"line_end":282,"column_start":55,"column_end":75,"is_primary":true,"text":[{"text":"                    self.anim_entities.insert(entity, AnimationEntity::new(","highlight_start":55,"highlight_end":75}],"label":"expected 6 arguments","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"associated function defined here","code":null,"level":"note","spans":[{"file_name":"engine/src/animation.rs","byte_start":7068,"byte_end":7077,"line_start":204,"line_end":204,"column_start":17,"column_end":26,"is_primary":false,"text":[{"text":"    pub fn new( id: usize,sprite: Sprite, states: AnimQueue, pos: Vec2, size: Vec2i, animation_layer: usize,) -> ","highlight_start":17,"highlight_end":26}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/animation.rs","byte_start":7078,"byte_end":7092,"line_start":204,"line_end":204,"column_start":27,"column_end":41,"is_primary":false,"text":[{"text":"    pub fn new( id: usize,sprite: Sprite, states: AnimQueue, pos: Vec2, size: Vec2i, animation_layer: usize,) -> ","highlight_start":27,"highlight_end":41}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/animation.rs","byte_start":7094,"byte_end":7111,"line_start":204,"line_end":204,"column_start":43,"column_end":60,"is_primary":false,"text":[{"text":"    pub fn new( id: usize,sprite: Sprite, states: AnimQueue, pos: Vec2, size: Vec2i, animation_layer: usize,) -> ","highlight_start":43,"highlight_end":60}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/animation.rs","byte_start":7113,"byte_end":7122,"line_start":204,"line_end":204,"column_start":62,"column_end":71,"is_primary":false,"text":[{"text":"    pub fn new( id: usize,sprite: Sprite, states: AnimQueue, pos: Vec2, size: Vec2i, animation_layer: usize,) -> ","highlight_start":62,"highlight_end":71}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/animation.rs","byte_start":7124,"byte_end":7135,"line_start":204,"line_end":204,"column_start":73,"column_end":84,"is_primary":false,"text":[{"text":"    pub fn new( id: usize,sprite: Sprite, states: AnimQueue, pos: Vec2, size: Vec2i, animation_layer: usize,) -> ","highlight_start":73,"highlight_end":84}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/animation.rs","byte_start":7137,"byte_end":7159,"line_start":204,"line_end":204,"column_start":86,"column_end":108,"is_primary":false,"text":[{"text":"    pub fn new( id: usize,sprite: Sprite, states: AnimQueue, pos: Vec2, size: Vec2i, animation_layer: usize,) -> ","highlight_start":86,"highlight_end":108}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/animation.rs","byte_start":7063,"byte_end":7066,"line_start":204,"line_end":204,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"    pub fn new( id: usize,sprite: Sprite, states: AnimQueue, pos: Vec2, size: Vec2i, animation_layer: usize,) -> ","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this function takes 6 arguments but 5 arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mengine/src/animation.rs:282:55\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m282\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    self.anim_entities.insert(entity, AnimationEntity::new(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected 6 arguments\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m283\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                self.sprite_sheet.sprites[entity.texture.index].clone(),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m284\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                AnimQueue::new(),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m285\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                entity.pos,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m286\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                entity.size,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m287\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                entity.texture.animation_layer\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msupplied 5 arguments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: associated function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mengine/src/animation.rs:204:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m204\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub fn new( id: usize,sprite: Sprite, states: AnimQueue, pos: Vec2, size: Vec2i, animation_layer: usize,) -> \u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------\u001b[0m\n\n"}
{"message":"the method `get_mut` exists for struct `HashMap<entity::Entity, AnimationEntity>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"engine/src/animation.rs","byte_start":10450,"byte_end":10457,"line_start":297,"line_end":297,"column_start":34,"column_end":41,"is_primary":true,"text":[{"text":"        match self.anim_entities.get_mut(entity){","highlight_start":34,"highlight_end":41}],"label":"method cannot be called on `HashMap<entity::Entity, AnimationEntity>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/entity.rs","byte_start":2151,"byte_end":2168,"line_start":120,"line_end":120,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"pub struct Entity {","highlight_start":1,"highlight_end":18}],"label":"doesn't satisfy `entity::Entity: Eq`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`entity::Entity: Eq`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider annotating `entity::Entity` with `#[derive(Eq)]`","code":null,"level":"help","spans":[{"file_name":"engine/src/entity.rs","byte_start":2151,"byte_end":2151,"line_start":120,"line_end":120,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"pub struct Entity {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"#[derive(Eq)]\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `get_mut` exists for struct `HashMap<entity::Entity, AnimationEntity>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mengine/src/animation.rs:297:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m297\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        match self.anim_entities.get_mut(entity){\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `HashMap<entity::Entity, AnimationEntity>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mengine/src/entity.rs:120:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct Entity {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `entity::Entity: Eq`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `entity::Entity: Eq`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider annotating `entity::Entity` with `#[derive(Eq)]`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[38;5;10m#[derive(Eq)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"this pattern has 2 fields, but the corresponding tuple variant has 1 field","code":{"code":"E0023","explanation":"A pattern attempted to extract an incorrect number of fields from a variant.\n\nErroneous code example:\n\n```compile_fail,E0023\nenum Fruit {\n    Apple(String, String),\n    Pear(u32),\n}\n\nlet x = Fruit::Apple(String::new(), String::new());\n\nmatch x {\n    Fruit::Apple(a) => {}, // error!\n    _ => {}\n}\n```\n\nA pattern used to match against an enum variant must provide a sub-pattern for\neach field of the enum variant.\n\nHere the `Apple` variant has two fields, and should be matched against like so:\n\n```\nenum Fruit {\n    Apple(String, String),\n    Pear(u32),\n}\n\nlet x = Fruit::Apple(String::new(), String::new());\n\n// Correct.\nmatch x {\n    Fruit::Apple(a, b) => {},\n    _ => {}\n}\n```\n\nMatching with the wrong number of fields has no sensible interpretation:\n\n```compile_fail,E0023\nenum Fruit {\n    Apple(String, String),\n    Pear(u32),\n}\n\nlet x = Fruit::Apple(String::new(), String::new());\n\n// Incorrect.\nmatch x {\n    Fruit::Apple(a) => {},\n    Fruit::Apple(a, b, c) => {},\n}\n```\n\nCheck how many fields the enum was declared with and ensure that your pattern\nuses the same number.\n"},"level":"error","spans":[{"file_name":"engine/src/animation.rs","byte_start":10960,"byte_end":10970,"line_start":310,"line_end":310,"column_start":23,"column_end":33,"is_primary":true,"text":[{"text":"            Some(key, anim_enity) =>{","highlight_start":23,"highlight_end":33}],"label":"expected 1 field, found 2","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/katianawieser/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/core/src/option.rs","byte_start":19625,"byte_end":19626,"line_start":522,"line_end":522,"column_start":56,"column_end":57,"is_primary":false,"text":[{"text":"    Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),","highlight_start":56,"highlight_end":57}],"label":"tuple variant has 1 field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/animation.rs","byte_start":10955,"byte_end":10958,"line_start":310,"line_end":310,"column_start":18,"column_end":21,"is_primary":true,"text":[{"text":"            Some(key, anim_enity) =>{","highlight_start":18,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0023]\u001b[0m\u001b[0m\u001b[1m: this pattern has 2 fields, but the corresponding tuple variant has 1 field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mengine/src/animation.rs:310:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m310\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            Some(key, anim_enity) =>{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected 1 field, found 2\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/katianawieser/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/core/src/option.rs:522:56\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m522\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mtuple variant has 1 field\u001b[0m\n\n"}
{"message":"this function takes 6 arguments but 5 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"engine/src/animation.rs","byte_start":10557,"byte_end":10612,"line_start":300,"line_end":300,"column_start":17,"column_end":72,"is_primary":false,"text":[{"text":"                self.sprite_sheet.sprites[entity.texture.index].clone(),","highlight_start":17,"highlight_end":72}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/animation.rs","byte_start":10630,"byte_end":10646,"line_start":301,"line_end":301,"column_start":17,"column_end":33,"is_primary":false,"text":[{"text":"                AnimQueue::new(),","highlight_start":17,"highlight_end":33}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/animation.rs","byte_start":10664,"byte_end":10674,"line_start":302,"line_end":302,"column_start":17,"column_end":27,"is_primary":false,"text":[{"text":"                entity.pos,","highlight_start":17,"highlight_end":27}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/animation.rs","byte_start":10692,"byte_end":10703,"line_start":303,"line_end":303,"column_start":17,"column_end":28,"is_primary":false,"text":[{"text":"                entity.size,","highlight_start":17,"highlight_end":28}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/animation.rs","byte_start":10721,"byte_end":10751,"line_start":304,"line_end":304,"column_start":17,"column_end":47,"is_primary":false,"text":[{"text":"                entity.texture.animation_layer","highlight_start":17,"highlight_end":47}],"label":"supplied 5 arguments","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/animation.rs","byte_start":10519,"byte_end":10539,"line_start":299,"line_end":299,"column_start":31,"column_end":51,"is_primary":true,"text":[{"text":"                let mut new = AnimationEntity::new(","highlight_start":31,"highlight_end":51}],"label":"expected 6 arguments","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"associated function defined here","code":null,"level":"note","spans":[{"file_name":"engine/src/animation.rs","byte_start":7068,"byte_end":7077,"line_start":204,"line_end":204,"column_start":17,"column_end":26,"is_primary":false,"text":[{"text":"    pub fn new( id: usize,sprite: Sprite, states: AnimQueue, pos: Vec2, size: Vec2i, animation_layer: usize,) -> ","highlight_start":17,"highlight_end":26}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/animation.rs","byte_start":7078,"byte_end":7092,"line_start":204,"line_end":204,"column_start":27,"column_end":41,"is_primary":false,"text":[{"text":"    pub fn new( id: usize,sprite: Sprite, states: AnimQueue, pos: Vec2, size: Vec2i, animation_layer: usize,) -> ","highlight_start":27,"highlight_end":41}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/animation.rs","byte_start":7094,"byte_end":7111,"line_start":204,"line_end":204,"column_start":43,"column_end":60,"is_primary":false,"text":[{"text":"    pub fn new( id: usize,sprite: Sprite, states: AnimQueue, pos: Vec2, size: Vec2i, animation_layer: usize,) -> ","highlight_start":43,"highlight_end":60}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/animation.rs","byte_start":7113,"byte_end":7122,"line_start":204,"line_end":204,"column_start":62,"column_end":71,"is_primary":false,"text":[{"text":"    pub fn new( id: usize,sprite: Sprite, states: AnimQueue, pos: Vec2, size: Vec2i, animation_layer: usize,) -> ","highlight_start":62,"highlight_end":71}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/animation.rs","byte_start":7124,"byte_end":7135,"line_start":204,"line_end":204,"column_start":73,"column_end":84,"is_primary":false,"text":[{"text":"    pub fn new( id: usize,sprite: Sprite, states: AnimQueue, pos: Vec2, size: Vec2i, animation_layer: usize,) -> ","highlight_start":73,"highlight_end":84}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/animation.rs","byte_start":7137,"byte_end":7159,"line_start":204,"line_end":204,"column_start":86,"column_end":108,"is_primary":false,"text":[{"text":"    pub fn new( id: usize,sprite: Sprite, states: AnimQueue, pos: Vec2, size: Vec2i, animation_layer: usize,) -> ","highlight_start":86,"highlight_end":108}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/animation.rs","byte_start":7063,"byte_end":7066,"line_start":204,"line_end":204,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"    pub fn new( id: usize,sprite: Sprite, states: AnimQueue, pos: Vec2, size: Vec2i, animation_layer: usize,) -> ","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this function takes 6 arguments but 5 arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mengine/src/animation.rs:299:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m299\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                let mut new = AnimationEntity::new(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected 6 arguments\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m300\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                self.sprite_sheet.sprites[entity.texture.index].clone(),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m301\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                AnimQueue::new(),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m302\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                entity.pos,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m303\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                entity.size,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m304\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                entity.texture.animation_layer\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msupplied 5 arguments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: associated function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mengine/src/animation.rs:204:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m204\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub fn new( id: usize,sprite: Sprite, states: AnimQueue, pos: Vec2, size: Vec2i, animation_layer: usize,) -> \u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------\u001b[0m\n\n"}
{"message":"the method `insert` exists for struct `HashMap<entity::Entity, AnimationEntity>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"engine/src/animation.rs","byte_start":10885,"byte_end":10891,"line_start":307,"line_end":307,"column_start":32,"column_end":38,"is_primary":true,"text":[{"text":"            self.anim_entities.insert(entity, new);","highlight_start":32,"highlight_end":38}],"label":"method cannot be called on `HashMap<entity::Entity, AnimationEntity>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"engine/src/entity.rs","byte_start":2151,"byte_end":2168,"line_start":120,"line_end":120,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"pub struct Entity {","highlight_start":1,"highlight_end":18}],"label":"doesn't satisfy `entity::Entity: Eq`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`entity::Entity: Eq`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider annotating `entity::Entity` with `#[derive(Eq)]`","code":null,"level":"help","spans":[{"file_name":"engine/src/entity.rs","byte_start":2151,"byte_end":2151,"line_start":120,"line_end":120,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"pub struct Entity {","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"#[derive(Eq)]\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `insert` exists for struct `HashMap<entity::Entity, AnimationEntity>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mengine/src/animation.rs:307:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m307\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            self.anim_entities.insert(entity, new);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `HashMap<entity::Entity, AnimationEntity>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0mengine/src/entity.rs:120:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct Entity {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `entity::Entity: Eq`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `entity::Entity: Eq`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider annotating `entity::Entity` with `#[derive(Eq)]`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[38;5;10m#[derive(Eq)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"unused import: `Hasher`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"engine/src/entity.rs","byte_start":1418,"byte_end":1424,"line_start":77,"line_end":77,"column_start":23,"column_end":29,"is_primary":true,"text":[{"text":"use std::hash::{Hash, Hasher};","highlight_start":23,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `Hasher`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mengine/src/entity.rs:77:23\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m77\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse std::hash::{Hash, Hasher};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\n"}
{"message":"aborting due to 17 previous errors; 9 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 17 previous errors; 9 warnings emitted\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0023, E0061, E0308, E0425, E0560, E0599, E0609.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0023, E0061, E0308, E0425, E0560, E0599, E0609.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0023`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0023`.\u001b[0m\n"}
